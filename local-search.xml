<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>docker入门</title>
    <link href="/2025/05/16/java/docker/docker%E5%85%A5%E9%97%A8/"/>
    <url>/2025/05/16/java/docker/docker%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p>后端用docker部署项目，包括单体与微服务<br>我们的目标： 学会使用docker部署项目</p><p>官方文档： <a href="https://docs.docker.com/get-started/">https://docs.docker.com/get-started/</a></p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ul><li>docker 概述</li><li>docker 安装</li><li>docker 命令<ul><li>镜像命令</li><li>容器命令</li><li>操作命令</li><li>..</li></ul></li><li>docker 镜像</li><li>docker 数据卷</li><li>dockerfile</li><li>docker 网络原理</li><li>idea整合docker</li><li>集群<ul><li>docker compose</li><li>docker swarm</li></ul></li><li>CICD jenkins</li><li>k8s</li></ul><h2 id="一、-docker概述"><a href="#一、-docker概述" class="headerlink" title="一、 docker概述"></a>一、 docker概述</h2><h3 id="1-docker-为什么会出现"><a href="#1-docker-为什么会出现" class="headerlink" title="1. docker 为什么会出现"></a>1. docker 为什么会出现</h3><ol><li><p>我们写了一个项目，在部署时，需要安装myxql redis java tocat nhinx，设置环境变量，将项目上传并运行，修改配置文件等步骤，非常麻烦，而且不一定能成功<br> 如果要在其他环境部署，则需要将这些步骤再来几遍</p></li><li><p>如果要安装集群，就更麻烦</p></li></ol><p>docker会将项目及其环境做成一个个集装箱（镜像），集装箱相互隔离，在本地运行成功，则任何环境都可以运行</p><p>类比：<br>安卓安装软件：<br>java  -&gt; apk   -&gt; 发布到应用商店 -&gt; 用户在商店下载apk -&gt; 安装即用</p><p>docker：<br>java -&gt; jar（环境）-&gt; 打包项目带上环境（镜像） -&gt; 发布到docker仓库（商店） -&gt; 下载镜像 -&gt;直接运行即可</p><h3 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2. 核心概念"></a>2. 核心概念</h3><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250516151612.png" alt="image.png"></p><ul><li>镜像<ul><li>是一个镜像是一个<strong>只读的静态模板</strong> ，可以通过这个模版创建多个容器实例</li></ul></li><li>容器<ul><li>容器是镜像的<strong>运行实例</strong></li></ul></li><li>仓库<ul><li>仓库是<strong>集中存储和分发镜像</strong>的地方，分为<strong>公共仓库</strong>（如Docker Hub）和<strong>私有仓库</strong>。</li></ul></li></ul><p>docker 的守护进程通过镜像创建容器 </p><h3 id="3-docker-与虚拟机的区别"><a href="#3-docker-与虚拟机的区别" class="headerlink" title="3.docker 与虚拟机的区别"></a>3.docker 与虚拟机的区别</h3><ul><li>虚拟机<ul><li>是全系统的虚拟化，软件模拟硬件环境，资源消耗大，启动慢 </li><li>要运行多个服务，就需要开多个虚拟机&#x2F;换端口</li></ul></li><li>docker （容器化技术）<ul><li>是进程级别的虚拟化，<em><strong>共享宿主机操作系统内核</strong></em>，仅隔离文件系统、网络和进程空间，通过命名空间（Namespace）和控制组（Cgroups）实现隔离。</li><li>清凉级，启动时间短，内存占用低</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250516150242.png" alt="image.png"></p><h3 id="4-docker-能做什么"><a href="#4-docker-能做什么" class="headerlink" title="4. docker 能做什么"></a>4. docker 能做什么</h3><p>devops：<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250516151224.png" alt="image.png"></p><h2 id="二、-docker-安装"><a href="#二、-docker-安装" class="headerlink" title="二、 docker 安装"></a>二、 docker 安装</h2><h3 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h3><p>我的评价是还是用windows吧，不用为镜像头疼<br><a href="https://blog.csdn.net/HYP_Coder/article/details/141753300">在国内 Windows 平台上安装 Docker 的详细教程_docker windows intel-CSDN博客</a></p><p>安装完毕后，代理软件开启全局，即可在命令进行测试学习</p><h3 id="linux-安装"><a href="#linux-安装" class="headerlink" title="linux 安装"></a>linux 安装</h3><p>可以用宝塔直接装好<br>下面是使用yum安装<br>环境：</p><ol><li>linux 服务器 （这里使用腾讯云 opencloudos）</li><li>ssh登录工具</li></ol><p>安装：</p><ol><li><p><a href="https://zouaw.com/85041.html">https://zouaw.com/85041.html</a></p><ol><li><em><strong>在第四步</strong></em>设置国内镜像仓库<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo yum-config-manager --<span class="hljs-built_in">add</span>-repo https://download.docker.<span class="hljs-keyword">com</span>/linux/centos/docker-<span class="hljs-keyword">ce</span>.repo<br></code></pre></td></tr></table></figure></li></ol></li><li><p>启动hello-world容器</p><ol><li><code>docker run hello-world</code><br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250516162256.png" alt="image.png"></li></ol></li><li><p>查看当前镜像</p><ol><li><code>docker images</code></li></ol></li><li><p>设置镜像：</p></li></ol><p>目前所有的镜像都用不了了，只能有一个临时可以用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker pull docker.1ms.run/镜像名<br></code></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">mkdir</span> -p /etc/docker<br><span class="hljs-built_in">sudo</span> <span class="hljs-built_in">tee</span> /etc/docker/daemon.json &lt;&lt;<span class="hljs-string">EOF</span><br><span class="hljs-string">&#123;</span><br><span class="hljs-string">  &quot;registry-mirrors&quot;: [</span><br><span class="hljs-string"> &quot;https://docker.m.daocloud.io&quot;, </span><br><span class="hljs-string"> &quot;https://hub-mirror.c.163.com&quot;, </span><br><span class="hljs-string"> &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="hljs-string">  &quot;https://registry.docker-cn.com&quot;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-built_in">sudo</span> systemctl daemon-reload<br><span class="hljs-built_in">sudo</span> systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="三、run的流程与docker-原理"><a href="#三、run的流程与docker-原理" class="headerlink" title="三、run的流程与docker 原理"></a>三、run的流程与docker 原理</h2><h3 id="1-run流程："><a href="#1-run流程：" class="headerlink" title="1.run流程："></a>1.run流程：</h3><ol><li>本机寻找镜像，若有则直接构建</li><li>若无<ol><li>到dockerhub查找， 若无，返回错误找不到镜像</li><li>若有 下载到本地，使用该镜像构建</li></ol></li></ol><h3 id="2-docker-原理"><a href="#2-docker-原理" class="headerlink" title="2.docker 原理"></a>2.docker 原理</h3><p>docker 是怎么工作的？</p><p>docker是一个 client-server 结构的系统（类似于redis），docker守护进程运行在主机上，通过socket中客户端访问</p><p>docker 在服务端有一个守护进程，通过守护进程操作docker资源，包括创建容器等</p><p>容器就像一个小linux虚拟机，各个容器之间相互隔离</p><h2 id="四、-docker-常用命令"><a href="#四、-docker-常用命令" class="headerlink" title="四、 docker 常用命令"></a>四、 docker 常用命令</h2><p><a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h3 id="1-帮助命令"><a href="#1-帮助命令" class="headerlink" title="1. 帮助命令"></a>1. 帮助命令</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs docker">docker version  <span class="hljs-comment"># 显示版本信息</span><br>docker info 显示docker 系统信息<br>docker --help <br></code></pre></td></tr></table></figure><h3 id="2-镜像命令"><a href="#2-镜像命令" class="headerlink" title="2.镜像命令"></a>2.镜像命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@VM-16-3-opencloudos ~]# docker images<br>REPOSITORY    TAG       IMAGE ID       CREATED        SIZE<br>hello-world   latest    74cc54e27dc4   3 months ago   10.1kB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">镜像仓库源     版本       镜像<span class="hljs-built_in">id</span>       创建时间         大小</span><br><br><br>可选参数： -a 列出所有  -q  只显示名称<br><br></code></pre></td></tr></table></figure><ul><li><p>docker search  名称搜索 （建议使用网页端搜索）</p></li><li><p>docker pull  镜像名 [：版本号] 下载镜像</p></li><li><p>docker rmi -f  镜像id  删除指定        f强制删除</p><ul><li>docker rmi -f `docker images -aq` 删除所有(windows不行)</li></ul></li><li><p>查看镜像元信息<code>docker inspect id</code></p></li></ul><h3 id="3-容器命令"><a href="#3-容器命令" class="headerlink" title="3. 容器命令"></a>3. 容器命令</h3><ol><li>创建容器<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run image <br><br><span class="hljs-comment"># 参数：</span><br> --name 设定镜像名<br> -d 后台启动 <br> -it    使用交互进入  在镜像名后跟/bin/bash，表示以bash进入<br> -P  主机端口:容器端口  指定端口 （小写p）<br> -p   随机端口<br><br>例子：<br>docker run --name <span class="hljs-string">&quot;ubuntu1&quot;</span>  -it -d -p 8080:8080 ubuntu /bin/bash<br><br></code></pre></td></tr></table></figure></li></ol><p>后台启动时，<code>docker run -d ubuntu</code><br>使用<code>docker ps </code> 发现没有，容器自动停止了<br>因为容器在后台运行时必须要有一个前台进程，若没有自动停止</p><ol start="2"><li><p>列出所有容器<br><code>docker ps</code><br>-a 显示全部   -q 只显示id       -n&#x3D;1 显示最近创建的n条</p></li><li><p>删除容器<br><code>docker rm id</code><br>-f 强制删除</p></li><li><p>退出容器<br>容器内 exit    停止并退出<br>ctrl + p+q   容器不停止退出</p></li><li><p>启动容器</p></li></ol><p>docker start  id<br>docker restart id 重启<br>docker stop id 停止容器 （正常停止，等所有准备完毕后退出）<br>docker kill   id  强制退出</p><ol start="6"><li><p>进入容器<br><code>docker exec  -it id /bin/bash</code> 开启新终端进入<br><code>docker attach 容器id /bin、bash</code> 进入正在执行的终端</p></li><li><p>从容器拷贝文件到主机<br>在容器内<br><code>docker cp 容器id  容器内路径 目的主机路径</code></p></li><li><p>查看容器内进程</p></li></ol><p>docker inspect id</p><h3 id="4-其他命令"><a href="#4-其他命令" class="headerlink" title="4. 其他命令"></a>4. 其他命令</h3><p>查看日志：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker logs <span class="hljs-built_in">id</span><br>-f  实时跟踪<br>-t 显示时间<br>--tails 显示条数<br></code></pre></td></tr></table></figure><h3 id="5-命令实战"><a href="#5-命令实战" class="headerlink" title="5. 命令实战"></a>5. 命令实战</h3><h4 id="a-命令安装nginx"><a href="#a-命令安装nginx" class="headerlink" title="a.命令安装nginx"></a>a.命令安装nginx</h4><ol><li>先到官网查找有没有</li><li>docker pull nginx  下载最新版</li><li>docker run –name “nginx1” -d -p 80:80 nginx<ol><li>返回容器id即为成功</li></ol></li><li>访问 localhost:80 即可看到nginx页面<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517141815.png" alt="image.png"></li></ol><p>如何进行配置</p><ol><li>进入容器内部<ol><li>docker exec -it 898f790449239f7eba71b9600823e4f2b2cefccbdf7d85b0c39a171903cd57f7 &#x2F;bin&#x2F;bash</li></ol></li><li>找nginx在哪个目录<ol><li>whereis nginx</li></ol></li><li>进入 etc 目录下的nginx 即可看到nginx.conf</li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517141924.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517151144.png" alt="image.png"></p><h4 id="b-安装tomcat"><a href="#b-安装tomcat" class="headerlink" title="b.安装tomcat"></a>b.安装tomcat</h4><ol><li>到官网找9.0版本</li><li>拉去镜像<ol><li>docker pull tomcat:9.0</li></ol></li><li>创建容器并运行<ol><li>docker run -d –name “tomcat1” -p 8080:8080 tomcat:9.0</li></ol></li><li>访问 localhost:8080 即可看到</li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517142913.png" alt="image.png"></p><p>为啥不是那个熟悉的猫的主页，因为<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517143018.png" alt="image.png"></p><p>因此可以将dist中文件复制到webapps中</p><ol><li>进入容器<ol><li>docker exec -it 7a6bd7be08c82904cc86fe2fe54153bd179a96048dfa374b62569c18f1f09793 &#x2F;bin&#x2F;bash</li></ol></li><li>复制<ol><li>cp -r webapps.dist&#x2F;* webapps</li></ol></li><li>刷新 页面 即可看到<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517143549.png" alt="image.png"></li></ol><p>要配置也可以直接配， 但是每次都要进入容器才能配， 后面我们使用数据卷可以将容器中的文件映射出去</p><h4 id="c-es-安装"><a href="#c-es-安装" class="headerlink" title="c. es 安装"></a>c. es 安装</h4><p>问题：</p><ol><li>es 占的内存超多， 基础的es都要有1G ， 服务器不好，就会特别卡</li><li>es要开放多个端口</li></ol><p>解决：</p><ol><li>增加内存限制</li></ol><p>步骤：</p><ol><li>下载es <ol><li>docker pull elasticsearch:7.17.28</li></ol></li><li>运行<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -d --name <span class="hljs-string">&quot;es&quot;</span> \<br>-p 9200:9200 -p 9300:9300  \    <span class="hljs-comment"># 端口</span><br>-e <span class="hljs-string">&quot;discovery.type=single-node&quot;</span> \   <span class="hljs-comment"># 环境变量 表示单节点运行</span><br>-e ES_JAVA_OPTS=<span class="hljs-string">&quot;-Xms64m -Xmx512m&quot;</span> \  <span class="hljs-comment"># 限制内存大小</span><br>elasticsearch:7.17.28<br></code></pre></td></tr></table></figure></li><li>访问localhost:9200<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517150516.png" alt="image.png"></li></ol><p>我们一般不会只装es，还有kibana等插件<br>但是容器又是相互隔离的，想要让kibana连接到es 还需要网络的配置</p><h2 id="五、-镜像详解"><a href="#五、-镜像详解" class="headerlink" title="五、 镜像详解"></a>五、 镜像详解</h2><h3 id="1-镜像原理"><a href="#1-镜像原理" class="headerlink" title="1. 镜像原理"></a>1. 镜像原理</h3><h4 id="a-镜像概念"><a href="#a-镜像概念" class="headerlink" title="a. 镜像概念"></a>a. 镜像概念</h4><ol><li>镜像是： 一个独立的可运行的软件包，包含程序的所有文件，及其依赖的库，环境及配置文件等<br>可直接运行</li></ol><h4 id="b-镜像的分层结构"><a href="#b-镜像的分层结构" class="headerlink" title="b.镜像的分层结构"></a>b.镜像的分层结构</h4><ol><li>镜像的结构是ufs 分层结构，是由一层一层的文件系统组成的<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518134751.png" alt="image.png"></li></ol><p>类似于git 的版本</p><ul><li>一开始我安装了一个centos 形成了版本一</li><li>后来我安装了 java，那么centos+java形成了版本二</li><li>我再安装python ，python+centos+java 形成了版本三<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517155000.png" alt="image.png"></li></ul><p>不过对于docker 来说，所有镜像的底层都是 bootf 与rootfs两层<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517155041.png" alt="image.png"></p><ul><li>bootfs： 是引导启动的一层文件，主要作用是 在电脑黑屏到亮屏之间起作用，引导系统的启动，启动完成后卸载。 <ul><li>对于这样的一种组件，每个系统都需要，所以他是docker镜像的最底层</li></ul></li><li>rootfs： 是&#x2F;bin &#x2F; etc &#x2F;root 等文件的文件系统，依然是都需要（不然咋进入容器操作），所以是第二层，</li></ul><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517162516.png" alt="image.png"></p><p>所以镜像是分层的</p><h4 id="c-镜像下载也分层"><a href="#c-镜像下载也分层" class="headerlink" title="c.镜像下载也分层"></a>c.镜像下载也分层</h4><ul><li>相应的下载也是分层的</li><li>层次是可复用的，用来节省内存<br>举个例子：<br>我们想要安装 mysql ，那么mysql 依赖centos 的环境，那么下载mysql顺便把centos下载下来<br>我们还要安装 nginx，它也依赖centos 环境，那么之前已经下载过了，就直接用了，不用再下载<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517155841.png" alt="image.png"></li></ul><h4 id="d-生成新镜像"><a href="#d-生成新镜像" class="headerlink" title="d. 生成新镜像"></a>d. 生成新镜像</h4><ol><li>我们下载下来的镜像是只读的</li><li>我们创建容器后，是在镜像层上加入了一层可写层</li><li>我们打包就变成了新的镜像</li></ol><p>所以镜像的生成也是加层<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517160410.png" alt="image.png"></p><h5 id="1）-生成实战-commit"><a href="#1）-生成实战-commit" class="headerlink" title="1） 生成实战 commit"></a>1） 生成实战 commit</h5><p>我们直到 tomcat官方给的镜像，文件都存储在webapps.dist目录下，我们将其转到webapps下，形成自己的镜像</p><ol><li>运行容器<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run --name <span class="hljs-string">&quot;tomcat1&quot;</span> -d -p 8080:8080 tomcat:9.0<br></code></pre></td></tr></table></figure></li><li>进行复制  参考之前安装</li><li>按 ctrl +p+q 不停止容器退出</li><li>执行命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker commit -m=<span class="hljs-string">&quot;w这是描述&quot;</span> -a=<span class="hljs-string">&quot;我是作者&quot;</span> 容器<span class="hljs-built_in">id</span> 目标镜像名：tag<br></code></pre></td></tr></table></figure></li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250517161219.png" alt="image.png"><br>可以看到本地镜像已经有了</p><h2 id="六、-数据卷"><a href="#六、-数据卷" class="headerlink" title="六、 数据卷"></a>六、 数据卷</h2><h3 id="1-出现的问题"><a href="#1-出现的问题" class="headerlink" title="1.出现的问题"></a>1.出现的问题</h3><ol><li>容器删除，数据消失，我们希望数据可以在本地持久化  比如mysql</li><li>需要进入到容器，才能修改配置</li></ol><h3 id="2-数据卷的作用"><a href="#2-数据卷的作用" class="headerlink" title="2. 数据卷的作用"></a>2. 数据卷的作用</h3><p>数据卷是一个数据同步技术<br>我们可以通过数据卷将容器内的数据同步到本地</p><p>本质： 将容器目录挂在到本地目录，容器与主机共用这个目录</p><p>同时还支持容器间的数据共享</p><h3 id="3-使用数据卷"><a href="#3-使用数据卷" class="headerlink" title="3.使用数据卷"></a>3.使用数据卷</h3><h4 id="1-使用命令来挂载"><a href="#1-使用命令来挂载" class="headerlink" title="1. 使用命令来挂载"></a>1. 使用命令来挂载</h4><p>-v 参数</p><ol><li>指定目录绑定<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -it -v 主机目录：容器目录 镜像名<br></code></pre></td></tr></table></figure></li></ol><p>但是<code>-v 主机目录：容器目录 </code>  会将主机文件目录的内容覆盖容器目录，所以主机为空，则容器目录会被覆盖<br>2. 匿名绑定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -it -v 容器内目录 镜像名<br></code></pre></td></tr></table></figure><p>会自动在本地挂载 ， 查看时数据卷的名称是一行自动生成id </p><ul><li>对于windows <code>\\wsl.localhost\docker-desktop\mnt\docker-desktop-disk\data\docker\volumes</code> 在这个目录</li><li>linux 就是直接显示的目录</li></ul><p>查看具体目录：<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518104156.png" alt="image.png"></p><p>还可以通过docker inspect  容器id 查看容器源信息来获取<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518104248.png" alt="image.png"></p><ol start="3"><li>具名绑定</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker run -it -v 数据卷名：容器目录 镜像名<br></code></pre></td></tr></table></figure><ul><li>这里可以指定数据卷的名称，意味着我们可以<em><strong>先创建数据卷</strong></em>，再将数据卷绑定上去<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 这里是数据卷的一些操作</span><br><br>docker volume create 数据卷名（my_volume） <span class="hljs-comment"># 创建并指定数据卷名</span><br><br>docker run -it -v my_volume : /etc/nginx nginx <span class="hljs-comment"># 绑定数据卷</span><br><br><span class="hljs-comment"># 查看数据卷</span><br>docker volume <span class="hljs-built_in">ls</span> 查看所有<br>docker volume inspect 卷名 查看数据卷的信息<br><br><span class="hljs-comment"># 删除数据卷</span><br>docker volume <span class="hljs-built_in">rm</span> &lt;卷名&gt;<br><br><br></code></pre></td></tr></table></figure></li></ul><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sh">docker volume create my_nginx_volume<br><br>docker run --name <span class="hljs-string">&quot;mynginx&quot;</span> -it -v my_nginx_volume:/etc/nginx nginx /bin/bash<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518105201.png" alt="image.png"></p><h4 id="2-使用dockerfile-挂载"><a href="#2-使用dockerfile-挂载" class="headerlink" title="2. 使用dockerfile 挂载"></a>2. 使用dockerfile 挂载</h4><p>dockerfile 是docker镜像的构建文件，是一个命令脚本<br>也可以使用这个来挂在数据卷，这个在dockerfile 时讲解</p><h3 id="4-数据卷的原理"><a href="#4-数据卷的原理" class="headerlink" title="4.数据卷的原理"></a>4.数据卷的原理</h3><h5 id="a-测试同步："><a href="#a-测试同步：" class="headerlink" title="a. 测试同步："></a>a. 测试同步：</h5><ol><li>主机新建，容器同步</li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518105812.png" alt="image.png"></p><ol start="2"><li>容器新建 ，主机同步<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518110007.png" alt="image.png"></li></ol><blockquote><p>结论：<br> 双向同步</p></blockquote><h5 id="b-测试持久化"><a href="#b-测试持久化" class="headerlink" title="b. 测试持久化"></a>b. 测试持久化</h5><ol><li>删除主机数据卷，观察容器<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518110235.png" alt="image.png"></li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518110449.png" alt="image.png"><br>发现确实没了<br>这里的modules 是无法删除的文件，windows中也有<br>2. 删除容器，观察主机<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518110610.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518110618.png"></p><p>可以看到容器的删除，没有影响到主机</p><ol start="3"><li>删除容器数据卷，观察主机<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518112307.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518112322.png" alt="image.png"></li></ol><p>可以看到容器数据卷操作，也是删除掉了</p><blockquote><p>结论<br> 容器删除不会影响 主机的数据卷<br>无论容器还是主机，对数据卷目录删除，就会删除</p></blockquote><h4 id="c-如何做到的"><a href="#c-如何做到的" class="headerlink" title="c. 如何做到的"></a>c. 如何做到的</h4><h5 id="1）对于同步"><a href="#1）对于同步" class="headerlink" title="1）对于同步"></a>1）对于同步</h5><ul><li><strong>正向同步</strong>：容器对挂载目录的改动直接写入宿主机数据卷，因两者共享同一物理存储。</li><li><strong>反向同步</strong>：宿主机对数据卷的修改（包括删除）会立即反映到容器中，因其依赖同一存储位置。 这种双向同步本质是文件系统的直接操作，而非 Docker 的主动复制</li></ul><p>是直接对同一位置的文件进行操作。</p><h5 id="2）-对于删除"><a href="#2）-对于删除" class="headerlink" title="2） 对于删除"></a>2） 对于删除</h5><p>数据卷的本质是宿主机文件系统的独立目录，与容器的UFS分层文件系统解耦</p><p>容器删除时，<em><strong>只会删掉 可写层</strong></em> ，而不会影响到文件目录</p><p>容器通过挂载点（如 <code>/etc/nginx</code>）直接访问宿主机数据卷目录。<strong>若宿主机的数据卷被删除（如通过 <code>docker volume rm</code>），容器内的挂载目录将失去底层存储支撑</strong>，导致数据不可见或丢失。此时容器可能因无法访问数据而报错<br>同理，容器对数据卷目录删除，也会删掉主机文件</p><h4 id="5-数据卷容器"><a href="#5-数据卷容器" class="headerlink" title="5.数据卷容器"></a>5.数据卷容器</h4><p>数据卷不光可以让主机与容器直接同步文件，还可以让容器与容器同步文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker <span class="hljs-built_in">run</span> <span class="hljs-comment">--volumes-from 数据卷名 镜像名</span><br></code></pre></td></tr></table></figure><h2 id="七、dockerfile"><a href="#七、dockerfile" class="headerlink" title="七、dockerfile"></a>七、dockerfile</h2><h3 id="1-什么是dockerfile"><a href="#1-什么是dockerfile" class="headerlink" title="1. 什么是dockerfile"></a>1. 什么是dockerfile</h3><p>dockerfile 是docker镜像的构建文件，是脚本命令，通过dockefile，我们创建出一个镜像</p><p>特点</p><ol><li>一行命令就是一层 ， <ol><li>镜像是分层的，dockerfile也是分层构建的</li></ol></li></ol><h3 id="2-指令"><a href="#2-指令" class="headerlink" title="2.指令"></a>2.指令</h3><p>dockerfile 的指令的几个原则：</p><ul><li>大写</li><li>从上到下执行</li><li># 代表注释</li><li>每个指令创建并提交一个新的镜像层</li></ul><p>dockerfile指令：</p><ol><li><p>FROM  指定基础镜像       必须作为首条指令</p></li><li><p>RUN 构建时执行的指令(如安装软件或配置环境)</p></li><li><p>CMD 定义容器启动时的默认命令，可被docker run 覆盖（docker run 后的命令 会直接覆盖掉这个命令）</p></li><li><p>ENTRYPOINT  设定容器启动时的默认命令，docker run 后的命令会追加到这个命令之后</p><ol><li>cmd 与entrypoint  同时存在， cmd 会做为追加参数</li></ol></li><li><p>ADD   添加文件到镜像中 （会自动解压和从url下载资源）</p></li><li><p>COPY 复制本地文件&#x2F;目录到镜像中 仅支持本地路径</p></li><li><p>WORKDIR 指定工作目录 ， 后续指令默认从此路径执行</p></li><li><p>ENV  设置环境变量 支持变量引用</p></li><li><p>EXPOSE 声明容器监听的端口</p></li><li><p>VOLUME 声明数据卷</p></li></ol><h5 id="1）CMD与ENTRYPOINT"><a href="#1）CMD与ENTRYPOINT" class="headerlink" title="1）CMD与ENTRYPOINT"></a>1）CMD与ENTRYPOINT</h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh"> ENTRYPOINT [<span class="hljs-string">&quot;python3&quot;</span>]  <br>CMD [<span class="hljs-string">&quot;app.py&quot;</span>]  <br><span class="hljs-comment"># 实际执行：python3 app.py</span><br></code></pre></td></tr></table></figure><ul><li><code>CMD</code> 的参数可通过 <code>docker run</code> 命令行覆盖，而 <code>ENTRYPOINT</code> 仅能通过 <code>--entrypoint</code> 标志完全替换。</li><li>示例：若镜像默认执行 <code>ENTRYPOINT [&quot;top&quot;, &quot;-b&quot;]</code> + <code>CMD [&quot;-c&quot;]</code>，运行时参数 <code>-d</code> 将替换 <code>CMD</code>，最终执行 <code>top -b -d</code>。</li></ul><p>官方的镜像都是使用dockerfile 构建的<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518205710.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250518205853.png" alt="image.png"></p><p>实例：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">17</span>-jdk-slim<br><span class="hljs-keyword">COPY</span><span class="language-bash"> target/app.jar /app.jar</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>, <span class="hljs-string">&quot;-jar&quot;</span>, <span class="hljs-string">&quot;/app.jar&quot;</span>]</span><br><br></code></pre></td></tr></table></figure><h3 id="3-构建步骤"><a href="#3-构建步骤" class="headerlink" title="3.构建步骤"></a>3.构建步骤</h3><ol><li>编写Dockerfile 文件</li><li>docker bulid -f 指定文件路径 -t 镜像名：tag </li><li>docker run 运行</li><li>docker push 推送</li></ol><h3 id="4-实战练习"><a href="#4-实战练习" class="headerlink" title="4. 实战练习"></a>4. 实战练习</h3><h4 id="1-ubuntu-升级"><a href="#1-ubuntu-升级" class="headerlink" title="1. ubuntu 升级"></a>1. ubuntu 升级</h4><p>ubuntu  没有 ifconfig vim 等命令<br>我们构建一个有这两个命令的镜像</p><ol><li><p>Dockerfile 文件&#96;</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Dockerfile"><span class="hljs-keyword">FROM</span> ubuntu<br><br><span class="hljs-keyword">ENV</span> MYPATH /usr/local<br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$MYPATH</span></span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update &amp;&amp; \</span><br><span class="language-bash"></span><br>    apt-get install -y vim net-tools<br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-variable">$MYPATH</span></span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;----------end------&quot;</span></span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /bin/bash</span><br><br></code></pre></td></tr></table></figure></li><li><p>构建文件<br>docker build -f mydockerfile -t myunbuntu:1.0 .</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250519082800.png" alt="image.png"></p><p>可以看到确实是一层一层构建的</p><ol start="3"><li>运行验证</li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250519083001.png" alt="image.png"><br>可以看到cmd 命令只有最后一条生效了<br>即CMD &#x2F;bin&#x2F;bash      前面都没有生效</p><p>使用<code>docker history id </code> 可以看到镜像是如何构建的<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250519083241.png" alt="image.png"></p><h3 id="5-发布镜像"><a href="#5-发布镜像" class="headerlink" title="5.发布镜像"></a>5.发布镜像</h3><p>后面补充，就目前这docker在国内的网络状况，没啥用</p><h2 id="八、docker网络"><a href="#八、docker网络" class="headerlink" title="八、docker网络"></a>八、docker网络</h2>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx入门</title>
    <link href="/2025/05/16/java/nginx/nginx%E5%85%A5%E9%97%A8/"/>
    <url>/2025/05/16/java/nginx/nginx%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>nginx 对于后端开发，只有在部署项目时会用到<br>所以我们的目标是：学会使用 nginx 部署项目</p><p>本文主要介绍nginx 基础部分，达到快速入门</p><p>包括：</p><ul><li>nginx 简介（为什么需要 nginx ,  nginx 是啥）</li><li>nginx 的功能及如何实现<ul><li>反向代理</li><li>负载均衡</li></ul></li><li>nginx 安装</li><li>实例</li></ul><h2 id="一、nginx-简介"><a href="#一、nginx-简介" class="headerlink" title="一、nginx 简介"></a>一、nginx 简介</h2><h3 id="1-为什么需要nginx"><a href="#1-为什么需要nginx" class="headerlink" title="1. 为什么需要nginx"></a>1. 为什么需要nginx</h3><ul><li>场景1： 反向代理<br>在用户量很小时，我们只有一台服务器就可以满足要求</li></ul><p>当用户增多时，服务器资源不够了，就需要在多台服务器部署项目<br>此时用户访问服务器时，可能会依次访问。<br>由于各个服务器之间session是不共享的，导致用户访问1服务器登录，再访问2又没登录</p><p>我们需要一个可以帮我们维持会话的服务。<br>nginx 就可以做到，只要让用户都访问nginx服务器即可，nginx做了会话管理，维持了登录等信息，同时nginx将携带了登录等信息的请求转发给服务器</p><ul><li>场景2：负载均衡</li></ul><p>我们的多台服务器的性能是不同的，我们更希望性能好的服务器接收更多请求。<br>nginx可以帮我做到负载均衡</p><p>同时nginx还可以做到</p><ul><li>提高安全性：由于都访问了nginx服务器， 隐藏真实服务器地址</li><li>提供了防盗链</li><li>动静分离</li></ul><h3 id="2-nginx-介绍"><a href="#2-nginx-介绍" class="headerlink" title="2. nginx 介绍"></a>2. nginx 介绍</h3><p>nginx 是一个高性能的 http和 反向代理服务器<br>可支持高达50000并发连接（tomcat可能才五六百）<br>同时内存小</p><h2 id="二、-nginx-功能"><a href="#二、-nginx-功能" class="headerlink" title="二、 nginx 功能"></a>二、 nginx 功能</h2><h3 id="1-反向代理"><a href="#1-反向代理" class="headerlink" title="1. 反向代理"></a>1. 反向代理</h3><h4 id="a-正向代理"><a href="#a-正向代理" class="headerlink" title="a. 正向代理"></a>a. 正向代理</h4><p>正向代理是代理客户端<br>比如：我们无法访问谷歌，但是我们可以访问如github等可以被访问的外网网站，我们可以先访问可以访问的外网网站，让这个网站帮我们访问谷歌，然后谷歌将数据给外网网站，外网网站再返回给我们</p><p>也就是说，我们客户端通过访问中间服务器，让中间服务器帮我们做事情，这就是正向代理</p><h4 id="b-反向代理"><a href="#b-反向代理" class="headerlink" title="b. 反向代理"></a>b. 反向代理</h4><p>反向代理是代理服务端</p><p>后端有多个服务器，用户访问一个域名， 会访问到一个统一的服务器，然后让这个服务器将请求转发给他们。<br>后端服务器 通过了中间服务器，让中间服务器代替他们接收请求，即反向代理<br>用户是感知不到有多台服务器， 用户只知道有一个域名</p><h3 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h3><p>内置策略：</p><ol><li>轮询</li><li>加权</li></ol><p>session 共享 （但是我们更多使用redis做session共享）</p><ul><li>iphash  <ul><li>通过ip进行计算得到hash值，将同一个客户端的ip请求永远转发给同一个服务器 就解决 了</li></ul></li></ul><h3 id="3-动静分离"><a href="#3-动静分离" class="headerlink" title="3. 动静分离"></a>3. 动静分离</h3><p>让静态资源从nginx 服务器进行加载，而不是从tomcat服务器，节省资源</p><h2 id="三、-安装"><a href="#三、-安装" class="headerlink" title="三、 安装"></a>三、 安装</h2><h3 id="1-windows-安装"><a href="#1-windows-安装" class="headerlink" title="1. windows 安装"></a>1. windows 安装</h3><ol><li><p>下载解压<br><a href="https://nginx.org/en/download.html">https://nginx.org/en/download.html</a><br>文件路径不要出现中文，否则无法启动 </p></li><li><p>命令行启动</p></li><li><p>访问localhost：80 可以看到nginx 欢迎页<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250516123039.png" alt="image.png"></p></li></ol><h3 id="2-linux-安装"><a href="#2-linux-安装" class="headerlink" title="2. linux 安装"></a>2. linux 安装</h3><ol><li><p>依旧下载</p></li><li><p>上传解压</p></li><li><p>进入目录</p><ul><li>执行configration 命令</li><li>make命令</li></ul></li></ol><ul><li>启动</li></ul><h2 id="四、-nginx-命令"><a href="#四、-nginx-命令" class="headerlink" title="四、 nginx 命令"></a>四、 nginx 命令</h2><ol><li>cd&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;sbin&#x2F;</li><li>.&#x2F;nginx启动</li><li>.&#x2F;nginx  -s stop  停止</li><li>.&#x2F;nginx  -s quit  安全退出</li><li>.&#x2F;nginx  -s reload  重新加载配置文件</li><li>ps aux|grep nginx  查看nginx进程</li></ol><p>修改配置文件 ：<br>修改nginx.conf ,         执行 nginx -s reload</p><h2 id="五、-nginx-配置"><a href="#五、-nginx-配置" class="headerlink" title="五、 nginx 配置"></a>五、 nginx 配置</h2><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250516123951.png" alt="image.png"></p><h3 id="1-http块内部"><a href="#1-http块内部" class="headerlink" title="1. http块内部"></a>1. http块内部</h3><p>对于http 块 内部结构</p><p>http 块可以嵌套：</p><ul><li>upstream</li><li>server</li></ul><p>server 块可以嵌套location</p><h4 id="a-upstream"><a href="#a-upstream" class="headerlink" title="a. upstream"></a>a. upstream</h4><ul><li>作用：用于定义后端服务器组， 支持<em><strong>负载均衡</strong></em>，指定后端服务器地址及权重</li></ul><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><br><span class="hljs-section">upstream</span> 组名称&#123;<br><span class="hljs-attribute">server</span> 地址/ip weight=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">server</span> 地址/ip weight=<span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-section">upstream</span> backend&#123;<br><br>ip_hash;  <span class="hljs-comment"># 使用iphash</span><br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.1.100</span> weight=<span class="hljs-number">1</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">192.168.1.101</span> weight=<span class="hljs-number">1</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h5 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h5><ul><li>如果weight 取值一致&#x2F;不配置weight，则是<em><strong>轮询策略</strong></em></li><li>weight是权重，weight越大，权重越高</li><li>iphash ： 根据客户端IP哈希固定分配服务器</li></ul><h4 id="b-server"><a href="#b-server" class="headerlink" title="b. server"></a>b. server</h4><p>可包含多个实例<br>作用：</p><ul><li>定义虚拟主机，控制域名，端口及请求处理逻辑<br>关键：</li><li>listen：监听端口</li><li>server_name: 域名&#x2F;ip       绑定域名，用户通过该域名访问时，nginx会使用此配块处理请求</li><li>root： 静态资源根目录     网站根目录，nginx会在此目录下查找请求的文件与文件夹</li><li>index： 默认首页文件       用户访问域名优先访问的文件</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>  <span class="hljs-attribute">server_name</span> example.com;<br>  <span class="hljs-attribute">root</span> /var/www/html;<br>  <span class="hljs-attribute">index</span> index.html;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="c-location"><a href="#c-location" class="headerlink" title="c. location"></a>c. location</h4><p>位于server快内可包含多个实例</p><ul><li>作用：根据url路径匹配请求，定义特定路由规则</li><li>关键指令<ul><li>proxy_pass: 反向代理后端服务</li><li>alias：指定路径别名</li><li>try_files： 按顺序尝试文件访问</li><li>proxy_set_header 设置</li></ul></li><li>子继承父级值，但可被覆盖</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">root</span> /var/www;<br><span class="hljs-section">location</span> /app &#123;<br><span class="hljs-attribute">root</span> /usr/share  <span class="hljs-comment"># 覆盖了父级，路径为：/usr/share/app</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-实现负载均衡"><a href="#2-实现负载均衡" class="headerlink" title="2. 实现负载均衡"></a>2. 实现负载均衡</h3><ol><li>设置服务器组</li><li>在<code>server</code>块中通过<code>proxy_pass</code>将请求转发到服务器组：</li><li>重新加载配置启动nginx -s reload</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> backend&#123;<br><span class="hljs-attribute">server</span> backend1.example.com:<span class="hljs-number">8080</span> weight=<span class="hljs-number">5</span>; <br><span class="hljs-attribute">server</span> backend2.example.com:<span class="hljs-number">8080</span>;<br>&#125;<br><br><br><span class="hljs-section">server</span> &#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>; <br><span class="hljs-attribute">server_name</span> example.com;<br><span class="hljs-section">location</span> / &#123;<br><span class="hljs-attribute">proxy_pass</span> http://backend;  <span class="hljs-comment">#将/的请求 代理到backend服务器组，根据权重进行分配</span><br><span class="hljs-attribute">proxy_set_header</span> Host $ host;  <span class="hljs-comment"># 将客户端请求中的原始`Host`头传递给后端服务器。</span><br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP $ remote_addr;  <span class="hljs-comment"># 将客户端真实ip传递给后端</span><br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $ proxy_add_x_forwarded_for; <span class="hljs-comment"># 传递IP链</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-静态资源配置"><a href="#3-静态资源配置" class="headerlink" title="3. 静态资源配置"></a>3. 静态资源配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> example.com;<br><span class="hljs-attribute">root</span> /var/www/html;<br><span class="hljs-attribute">index</span> index.html;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-反向代理"><a href="#4-反向代理" class="headerlink" title="4. 反向代理"></a>4. 反向代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> example.com;  <span class="hljs-comment"># 绑定域名或IP</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://backend_server;  <span class="hljs-comment"># 后端服务器地址</span><br>        <span class="hljs-attribute">proxy_set_header</span> Host  $ host;       <span class="hljs-comment"># 传递原始Host头</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP  $ remote_addr;  <span class="hljs-comment"># 传递客户端真实IP</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For  $ proxy_add_x_forwarded_for;  <span class="hljs-comment"># 记录代理链</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto  $ scheme;  <span class="hljs-comment"># 传递协议（HTTP/HTTPS）</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="5-动静分离"><a href="#5-动静分离" class="headerlink" title="5. 动静分离"></a>5. 动静分离</h3><p>将静态资源（如HTML、CSS、JS、图片等）与动态请求（如PHP、JSP等需后端处理的文件）分开处理，静态资源由Nginx直接返回，动态请求转发至后端服务器。</p><ul><li><code>～*</code>：不区分大小写的正则匹配静态后缀。</li><li><ul><li><code>fastcgi_pass</code>：动态请求转发至PHP-FPM。</li></ul></li></ul><p>简单实例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-section">location</span> /static/ &#123;  <span class="hljs-comment"># 静态资源路径</span><br>        <span class="hljs-attribute">root</span> /var/www/html;<br>        <span class="hljs-attribute">expires</span> <span class="hljs-number">30d</span>;<br>    &#125;<br>    <span class="hljs-section">location</span> / &#123;         <span class="hljs-comment"># 动态请求转发</span><br>        <span class="hljs-attribute">proxy_pass</span> http://backend_servers;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>单服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs nginx">server&#123;<br><span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br><span class="hljs-attribute">server_name</span> example.com;<br><span class="hljs-attribute">root</span> /var/www/html;<br><br><span class="hljs-comment"># 静态资源配置</span><br><span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(jpg|css|js|png)</span> $&#123;<br><span class="hljs-attribute">root</span> /var/www/static; <span class="hljs-comment"># 静态资源目录</span><br><span class="hljs-attribute">expires</span> <span class="hljs-number">30d</span> <span class="hljs-comment"># 设置缓存时间</span><br>acess_log    <span class="hljs-literal">off</span> <span class="hljs-comment"># 关闭日志 </span><br>&#125;<br><span class="hljs-comment"># 动态资源匹配（如PHP文件）</span><br>    location ～ \.php $  &#123;<br>        <span class="hljs-attribute">fastcgi_pass</span> <span class="hljs-number">127.0.0.1:9000</span>;  <span class="hljs-comment"># PHP-FPM地址</span><br>        <span class="hljs-attribute">fastcgi_index</span> index.php;<br>        <span class="hljs-attribute">fastcgi_param</span> SCRIPT_FILENAME  $ document_root $ fastcgi_script_name;<br>        <span class="hljs-attribute">include</span> fastcgi_params;<br>    &#125;<br><br>    <span class="hljs-comment"># 默认请求（如HTML或未匹配的路径）</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">try_files</span>  $ uri  $ uri/ /index.php? $ args;<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>多服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 静态资源服务器配置</span><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> static.example.com;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">root</span> /var/www/static;<br>        <span class="hljs-attribute">autoindex</span> <span class="hljs-literal">on</span>;  <span class="hljs-comment"># 显示目录结构（调试用）</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment"># 动态资源反向代理配置</span><br><span class="hljs-section">upstream</span> tomcat_servers &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.1.10:8080</span> weight=<span class="hljs-number">5</span>;  <span class="hljs-comment"># Tomcat实例1</span><br>    <span class="hljs-attribute">server</span> <span class="hljs-number">192.168.1.11:8080</span> weight=<span class="hljs-number">10</span>; <span class="hljs-comment"># Tomcat实例2</span><br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> example.com;<br><br>    <span class="hljs-comment"># 静态资源请求转发至静态服务器</span><br>    <span class="hljs-section">location</span> ～* \.(jpg|css|js|png) $  &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://static.example.com;<br>    &#125;<br><br>    <span class="hljs-comment"># 动态请求转发至Tomcat集群</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://tomcat_servers;<br>        <span class="hljs-attribute">proxy_set_header</span> Host  $ host;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP  $ remote_addr;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For  $ proxy_add_x_forwarded_for;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-重写机制"><a href="#6-重写机制" class="headerlink" title="6. 重写机制"></a>6. 重写机制</h3><h3 id="7-会话保持"><a href="#7-会话保持" class="headerlink" title="7.会话保持"></a>7.会话保持</h3><p>使用负载均衡策略的 iphash</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> tomcat_servers &#123;<br>    ip_hash;  <span class="hljs-comment"># 客户端IP固定分配到同一服务器</span><br>    <span class="hljs-attribute">server</span> tomcat1.example.com:<span class="hljs-number">8080</span>;<br>    <span class="hljs-attribute">server</span> tomcat2.example.com:<span class="hljs-number">8080</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>任务调度与邮件发送</title>
    <link href="/2025/05/14/java/Springboot/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%8E%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/"/>
    <url>/2025/05/14/java/Springboot/%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E4%B8%8E%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    
    <content type="html"><![CDATA[<h1 id="任务调度与邮件发生"><a href="#任务调度与邮件发生" class="headerlink" title="任务调度与邮件发生"></a>任务调度与邮件发生</h1><p>本文介绍 在 springboot 中如何实现 </p><ol><li>异步任务</li><li>定时任务</li><li>发送邮件</li></ol><h2 id="一、-使用Spring-Task-实现异步任务与定时任务"><a href="#一、-使用Spring-Task-实现异步任务与定时任务" class="headerlink" title="一、 使用Spring Task 实现异步任务与定时任务"></a>一、 使用Spring Task 实现异步任务与定时任务</h2><h3 id="1-异步任务"><a href="#1-异步任务" class="headerlink" title="1. 异步任务"></a>1. 异步任务</h3><h4 id="a-异步任务的作用"><a href="#a-异步任务的作用" class="headerlink" title="a. 异步任务的作用"></a>a. 异步任务的作用</h4><p>方法是依次往下执行的， 而有些操作是非常耗时的（比如读文件，发邮件等），主线程就会等待操作执行完成后继续向下执行。<br>我们不希望程序等在那里， 用户体验不好</p><p>我们可以使用一个子线程去执行费时的操作，主线程依旧往下执行<br>但是自己给每个任务都开一个线程又很麻烦</p><p>所以使用springboot框架封装的异步任务来完成</p><h4 id="b-如何实现"><a href="#b-如何实现" class="headerlink" title="b. 如何实现"></a>b. 如何实现</h4><h5 id="1）-使用注解实现"><a href="#1）-使用注解实现" class="headerlink" title="1） 使用注解实现"></a>1） 使用注解实现</h5><ol><li>启动异步任务<ul><li>在主启动类上 加上 @EnableAsync</li></ul></li><li>在要异步的方法上加上 @Async注解 即可</li></ol><blockquote><p>实例：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableAsync</span>  <br><span class="hljs-meta">@SpringBootApplication</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTaskApplication</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        SpringApplication.run(SpringbootTaskApplication.class, args);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;  <br><br><span class="hljs-comment">//无返回值</span><br>    <span class="hljs-meta">@Async</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sayHello</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">try</span> &#123;  <br>            Thread.sleep(<span class="hljs-number">3000</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>        &#125;  <br>    &#125;  <br>  <br><span class="hljs-comment">//有返回值， 使用AsyncResult作为返回值， Future/CompletableFuture接收</span><br>    <span class="hljs-meta">@Async</span>  <br>    <span class="hljs-keyword">public</span> Future&lt;String&gt; <span class="hljs-title function_">sayHelloAsync</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">try</span>&#123;  <br>            Thread.sleep(<span class="hljs-number">5000</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AsyncResult</span>&lt;&gt;(<span class="hljs-string">&quot;Hello World&quot;</span>);  <br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>        &#125;  <br>  <br>  <br>    &#125;  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-meta">@RestController</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyController</span> &#123;  <br>  <br>    <span class="hljs-meta">@Resource</span>  <br>    <span class="hljs-keyword">private</span> MyService myService;  <br>  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/helloaay&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hellosay</span><span class="hljs-params">()</span> &#123;  <br>      myService.sayHello();    <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>    &#125;  <br>  <br>  <br>    <span class="hljs-meta">@GetMapping(&quot;/hello&quot;)</span>  <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ExecutionException, InterruptedException &#123;  <br>        Future&lt;String&gt; future = myService.sayHelloAsync();  <span class="hljs-comment">//这里需要等待返结果，所以依然阻塞了，可以试试响应式编程  </span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>+future.get();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>效果</p></blockquote><p>可以看到主线程不再阻塞，而是使用子线程去执行该方法， 主线程依旧往下执行</p><h5 id="2）使用CompletableFuture实现链式异步"><a href="#2）使用CompletableFuture实现链式异步" class="headerlink" title="2）使用CompletableFuture实现链式异步"></a>2）使用CompletableFuture实现链式异步</h5><h2 id="CompletableFuture共有四种方法"><a href="#CompletableFuture共有四种方法" class="headerlink" title="CompletableFuture共有四种方法"></a>CompletableFuture共有四种方法</h2><h2 id="二、定时任务"><a href="#二、定时任务" class="headerlink" title="二、定时任务"></a>二、定时任务</h2><h3 id="1-定时任务的作用"><a href="#1-定时任务的作用" class="headerlink" title="1.定时任务的作用"></a>1.定时任务的作用</h3><p>我们有时会需要 一个任务隔一段时间执行一次， 比如 将数据从mysql 没五分钟同步到es中<br>这时需要写一个定时任务，来完成</p><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250515081903.png" alt="image.png"></p><h3 id="2-实现"><a href="#2-实现" class="headerlink" title="2.实现"></a>2.实现</h3><ol><li>开启定时任务支持<ul><li>在主线程上使用注解 @EnableScheduling</li></ul></li><li>在方法上加上@Scheduled（cron &#x3D; “”） 即可</li></ol><p>cron 语法：<br>6个字段及特殊符号组成</p><ul><li>字段依次代表： 秒-分-时 -日期-月份-星期</li><li>特殊符号<ul><li>* 匹配所有</li><li>&#x2F; 步长，每多长执行一次</li><li><ul><li>指定范围</li></ul></li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250514212851.png" alt="image.png"></p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableScheduling</span>  <br><span class="hljs-meta">@EnableAsync</span>  <br><span class="hljs-meta">@SpringBootApplication</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringbootTaskApplication</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        SpringApplication.run(SpringbootTaskApplication.class, args);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> &#123;  <br>  <br>    <span class="hljs-meta">@Scheduled(cron = &quot;0/5 * * * * *&quot;)</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;  <br>        System.out.println(<span class="hljs-string">&quot;Helloaaaa&quot;</span>);  <br>    &#125;  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>当springboot启动后，每5秒执行依次</p><h2 id="三、-邮件发送"><a href="#三、-邮件发送" class="headerlink" title="三、 邮件发送"></a>三、 邮件发送</h2><p>使用springboot发邮件</p><h3 id="1-步骤"><a href="#1-步骤" class="headerlink" title="1. 步骤"></a>1. 步骤</h3><ol><li><p>引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在yml 中进行配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:  <br>  mail:  <br>    username: <span class="hljs-number">2323864130</span><span class="hljs-meta">@qq</span>.com  <br>    password: xhqroyvriefndiea  <br>    host:  smtp.qq.com  <br>    properties:  <br>      mail:  <br>        smtp:  <br>          ssl:  <br>            enable: <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure></li></ol><ul><li>username 为邮箱</li><li>password：授权码</li><li>host：smtp.qq.com</li><li>properties： qq邮箱需要开启ssl加密。其他邮箱不需要</li></ul><p>授权码获取：设置-账号与安全-安全设置-POP3&#x2F;IMAP&#x2F;SMTP&#x2F;Exchange&#x2F;CardDAV 服务-开启服务-发送短信 </p><p>即可获取</p><ol start="3"><li>调用JavaMailSenderImpl 进行发送</li></ol><p>简单邮件的发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span>  <br><span class="hljs-keyword">private</span> JavaMailSender mailSender;  <br>  <br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;  <br>  <br>    <span class="hljs-type">SimpleMailMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleMailMessage</span>();  <br>  <br>    message.setSubject(<span class="hljs-string">&quot;一封java发送的邮件&quot;</span>);  <br>  <br>    message.setText(<span class="hljs-string">&quot;这是text&quot;</span>);  <br>  <br>    message.setFrom(<span class="hljs-string">&quot;2323864130@qq.com&quot;</span>);  <br>  <br>    message.setTo(<span class="hljs-string">&quot;2323864130@qq.com&quot;</span>);  <br>    mailSender.send(message);  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><p>复杂邮件的发送</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Resource</span>  <br><span class="hljs-keyword">private</span> JavaMailSender mailSender;  <br>  <br><span class="hljs-meta">@org</span>.junit.jupiter.api.Test  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException &#123;  <br>  <br>    <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">mimeMessage</span> <span class="hljs-operator">=</span> mailSender.createMimeMessage();  <br>    <span class="hljs-comment">//组装  </span><br>    <span class="hljs-type">MimeMessageHelper</span> <span class="hljs-variable">mimeMessageHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessageHelper</span>(mimeMessage, <span class="hljs-literal">true</span>);  <br>  <br>    mimeMessageHelper.setSubject(<span class="hljs-string">&quot;一封java发送的复杂邮件&quot;</span>);  <br>  <br>    <span class="hljs-comment">//  参数：文本， 是否开启html解析  </span><br>    mimeMessageHelper.setText(<span class="hljs-string">&quot;&lt;p style=&#x27;color:red&#x27;&gt; 你好呀&lt;/p&gt;&quot;</span>, <span class="hljs-literal">true</span>);  <br>  <br>    mimeMessageHelper.setFrom(<span class="hljs-string">&quot;2323864130@qq.com&quot;</span>);  <br>  <br>    mimeMessageHelper.setTo(<span class="hljs-string">&quot;2323864130@qq.com&quot;</span>);  <br>  <br>    <span class="hljs-comment">//附件  </span><br>    mimeMessageHelper.addAttachment(<span class="hljs-string">&quot;1.png&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\1.png&quot;</span>));  <br>    mailSender.send(mimeMessage);  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring Security</title>
    <link href="/2025/05/14/java/Springboot/springSecurity/"/>
    <url>/2025/05/14/java/Springboot/springSecurity/</url>
    
    <content type="html"><![CDATA[<h1 id="springSecurity"><a href="#springSecurity" class="headerlink" title="springSecurity"></a>springSecurity</h1><p>springsecurity 可以对用户进行身份认真，还可以进行权限管理等操作</p><h2 id="一、springSecurity入门"><a href="#一、springSecurity入门" class="headerlink" title="一、springSecurity入门"></a>一、springSecurity入门</h2><p>基于aop思想和Servlet过滤器实现的框架<br>提供了 认证与授权功能 ， 实现用户只能访问自己有权限的资源</p><p>实现权限管理通常设计三个对象</p><ul><li>用户：包括用户名，密码，其他用户信息， 用于认证功能</li><li>角色：主要包含 角色名称，角色描述，权限信息  。  用于授权操作</li><li>权限：也叫菜单 包含 权限名称，url地址等 。  用于动态展示 ，只显示用户有权限的部分</li></ul><h3 id="1-使用实例"><a href="#1-使用实例" class="headerlink" title="1. 使用实例"></a>1. 使用实例</h3><ol><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存管理</title>
    <link href="/2025/05/14/java/Springboot/%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <url>/2025/05/14/java/Springboot/%E7%BC%93%E5%AD%98%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-缓存管理"><a href="#springboot-缓存管理" class="headerlink" title="springboot-缓存管理"></a>springboot-缓存管理</h1><p>参考 <a href="https://www.codefather.cn/course/1864210260732116994/section/1868855546343915522?contentType=text&tabKey=list&type=#heading-9">https://www.codefather.cn/course/1864210260732116994/section/1868855546343915522?contentType=text&amp;tabKey=list&amp;type=#heading-9</a> </p><p>springboot支持多级缓存<br>包括 </p><ul><li>本地缓存 </li><li>redis分布式缓存</li></ul><h2 id="一、-redis-分布式缓存"><a href="#一、-redis-分布式缓存" class="headerlink" title="一、 redis 分布式缓存"></a>一、 redis 分布式缓存</h2><p>很简单： </p><ul><li>在查询完数据库后，将数据插入到redis中</li><li>在查询数据时，先从redis中获取，没有再从数据库获取</li></ul><h3 id="1-实例"><a href="#1-实例" class="headerlink" title="1. 实例"></a>1. 实例</h3><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>规划</title>
    <link href="/2025/05/14/%E8%A7%84%E5%88%92/"/>
    <url>/2025/05/14/%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[<h1 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h1><ul><li><input disabled="" type="checkbox"> 初始化</li><li><input disabled="" type="checkbox"> 用户模块<ul><li><input disabled="" type="checkbox"> 集成springSecurity</li><li>[ ]</li></ul></li></ul><h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><ul><li><input disabled="" type="checkbox"> devops</li><li><input disabled="" type="checkbox"> docker 原理</li><li><input disabled="" type="checkbox"> 守护进程的作用</li><li><input disabled="" type="checkbox"> 后续dicd<ul><li><input disabled="" type="checkbox"> k8s</li><li><input disabled="" type="checkbox"> dockercompose</li></ul></li><li><input disabled="" type="checkbox"> 发布镜像</li><li><input disabled="" type="checkbox"> docker 网络</li><li><input disabled="" type="checkbox"> 微服务集成</li></ul><h1 id="elastic-search"><a href="#elastic-search" class="headerlink" title="elastic search"></a>elastic search</h1><ul><li><input disabled="" type="checkbox"> 倒排索引 </li><li><input disabled="" type="checkbox"> es进阶： <ul><li><input disabled="" type="checkbox"> 数据同步</li><li><input disabled="" type="checkbox"> </li></ul></li><li><input disabled="" type="checkbox"> es面试题</li></ul><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><ul><li><input checked="" disabled="" type="checkbox"> niginx 配置文件详解</li><li><input disabled="" type="checkbox"> niginx的防盗链如何设置</li><li><input checked="" disabled="" type="checkbox"> 动静分离</li><li><input disabled="" type="checkbox"> 重写</li><li><input disabled="" type="checkbox"> nginx 实战</li></ul><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><ul><li><input disabled="" type="checkbox"> [[springboot-数据访问]] <ul><li><input disabled="" type="checkbox"> mybatis-plus 笔记补充</li><li><input disabled="" type="checkbox"> springdata 的原理</li></ul></li><li><input disabled="" type="checkbox"> [[springboot-数据访问]] <ul><li><input disabled="" type="checkbox"> redis 事务，</li><li><input disabled="" type="checkbox"> 分布式锁 </li><li><input disabled="" type="checkbox"> spring-data-redis 操作user对象到redis中，</li><li><input disabled="" type="checkbox"> redis序列化策略</li></ul></li><li><input disabled="" type="checkbox"> [[缓存管理]] <ul><li><input disabled="" type="checkbox"> redis 分布式缓存的</li></ul></li><li><input disabled="" type="checkbox"> [[springSecurity]]  <ul><li><input disabled="" type="checkbox"> shiro</li></ul></li><li><input disabled="" type="checkbox"> [[任务调度与邮件发送]] <ul><li><input disabled="" type="checkbox"> completablefuture 异步</li></ul></li><li><input disabled="" type="checkbox"> springboot xxxautoconfig</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>常用软件安装地址</title>
    <link href="/2025/05/14/%E7%B3%BB%E7%BB%9F/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%9C%B0%E5%9D%80/"/>
    <url>/2025/05/14/%E7%B3%BB%E7%BB%9F/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E5%9C%B0%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<h1 id="编程使用"><a href="#编程使用" class="headerlink" title="编程使用"></a>编程使用</h1><h2 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h2><p><a href="https://blog.csdn.net/m0_52559040/article/details/121843945">https://blog.csdn.net/m0_52559040/article/details/121843945</a></p><h2 id="navicate："><a href="#navicate：" class="headerlink" title="navicate："></a>navicate：</h2><p><a href="https://www.cnblogs.com/marchxd/p/15580739.html#5201423">https://www.cnblogs.com/marchxd/p/15580739.html#5201423</a></p><h2 id="typora"><a href="#typora" class="headerlink" title="typora"></a>typora</h2><p><a href="https://redball1017.lanzoub.com/b03js9dle">https://redball1017.lanzoub.com/b03js9dle</a> 密码：redball(这个需要将winmm.dll粘贴到下载文件)</p><h2 id="sublime-text："><a href="#sublime-text：" class="headerlink" title="sublime text："></a>sublime text：</h2><p><a href="https://www.cnblogs.com/w-j-q/p/14933185.html">https://www.cnblogs.com/w-j-q/p/14933185.html</a></p>]]></content>
    
    
    <categories>
      
      <category>重装系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据访问</title>
    <link href="/2025/05/14/java/Springboot/springboot-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
    <url>/2025/05/14/java/Springboot/springboot-%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-数据访问"><a href="#springboot-数据访问" class="headerlink" title="springboot-数据访问"></a>springboot-数据访问</h1><p>介绍 springboot 进行数据访问， 包<br>括</p><ul><li>对ORM框架（如mysql）访问的 spring-data-JPA</li><li>mybatis-plus的使用</li><li>springboot 整合redis    spring-data-redis</li></ul><h2 id="一、-springdata"><a href="#一、-springdata" class="headerlink" title="一、 springdata"></a>一、 springdata</h2><p>springboot 采用 spring-data 来处理数据访问层</p><p>spring-data 是一套开源框架，提供了一套统一的接口，包括 增删改查，分页，条件查询，排序等<br>spring-data 子项目实现了这些接口，从而实现对不同数据库的访问</p><p>spring-data 子项目：</p><ul><li>spring-data-JPA</li><li><strong>Spring Data Redis</strong></li><li><strong>Spring Data Elasticsearch</strong></li><li>等</li></ul><h2 id="二、spring-data-jpa"><a href="#二、spring-data-jpa" class="headerlink" title="二、spring -data -jpa"></a>二、spring -data -jpa</h2><p>spring-data-jpa 基于jpa规范和orm 框架创建，默认使用 hibernate 实现</p><h3 id="1-操作数据库的方法"><a href="#1-操作数据库的方法" class="headerlink" title="1. 操作数据库的方法"></a>1. 操作数据库的方法</h3><h4 id="a-使用父接口的方法"><a href="#a-使用父接口的方法" class="headerlink" title="a. 使用父接口的方法"></a>a. 使用父接口的方法</h4><p>开发者只需通过继承 <code>JpaRepository&lt;T, ID&gt;</code> 接口即可获得基础的增删改查功能（如 <code>save()</code>、<code>deleteById()</code>、<code>findAll()</code> 等），无需重复实现这些通用逻辑</p><h4 id="b-根据方法命名自动生成-方法"><a href="#b-根据方法命名自动生成-方法" class="headerlink" title="b.根据方法命名自动生成 方法"></a>b.根据方法命名自动生成 方法</h4><p>Spring Data JPA 的最大亮点之一是 <strong>通过接口方法名自动生成 SQL 查询逻辑</strong> 。例如，若定义 <code>UserRepository</code> 接口并声明方法 <code>findByUsername(String username)</code>，框架会自动解析方法名中的 <code>find + By + 字段名</code> 规则，生成类似 <code>SELECT * FROM user WHERE username = ?</code> 的 SQL 语句，无需手动编写实现类</p><h4 id="c-原生sql"><a href="#c-原生sql" class="headerlink" title="c. 原生sql"></a>c. 原生sql</h4><p>对于复杂查询，可通过以下方式扩展：</p><ul><li><strong><code>@Query</code> 注解</strong> ：直接编写 JPQL 或原生 SQL 语句。例如：  <figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">```java<br>    @Query(<span class="hljs-string">&quot;SELECT u FROM User u WHERE u.email = ?1&quot;</span>)<br>    <span class="hljs-keyword">User</span> <span class="hljs-title">findByEmail</span>(<span class="hljs-keyword">String</span> email);<br>    //这种方式适用于需精确控制查询逻辑的场景<br>    <br></code></pre></td></tr></table></figure></li></ul><h4 id="d-分页"><a href="#d-分页" class="headerlink" title="d. 分页"></a>d. 分页</h4><p>Spring Data JPA 提供了 Pageable 和 Sort 工具类，支持分页查询和结果排序。例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Page&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(Pageable pageable)</span>; <span class="hljs-comment">// 分页查询</span><br>List&lt;User&gt; <span class="hljs-title function_">findAll</span><span class="hljs-params">(Sort sort)</span>;         <span class="hljs-comment">// 排序查询</span><br>这一特性简化了大数据量场景下的性能优化 <br></code></pre></td></tr></table></figure><h3 id="2-实例"><a href="#2-实例" class="headerlink" title="2. 实例"></a>2. 实例</h3><p>jpa 不需要提前有这个表结构，他会自动创建</p><ol><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">datasource:</span>  <br>  <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://localhost:3306/test</span>  <br>  <span class="hljs-attr">username:</span> <span class="hljs-string">root</span>  <br>  <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span>  <br>  <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span>  <br><span class="hljs-attr">jpa:</span>  <br>  <span class="hljs-attr">hibernate:</span>  <br>    <span class="hljs-attr">ddl-auto:</span> <span class="hljs-string">update</span><br></code></pre></td></tr></table></figure><ol start="4"><li><p>写实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-keyword">import</span> lombok.AllArgsConstructor;  <br><span class="hljs-keyword">import</span> lombok.Data;  <br><span class="hljs-keyword">import</span> lombok.NoArgsConstructor;  <br><span class="hljs-keyword">import</span> org.springframework.data.annotation.CreatedDate;  <br>  <br><span class="hljs-keyword">import</span> javax.persistence.*;  <br><span class="hljs-keyword">import</span> java.sql.Date;  <br>  <br>  <br><span class="hljs-meta">@Entity</span>  <br><span class="hljs-meta">@Table(name = &quot;user&quot;)</span>  <br><span class="hljs-meta">@Data</span>  <br><span class="hljs-meta">@NoArgsConstructor</span>  <br><span class="hljs-meta">@AllArgsConstructor</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;  <br>  <br>    <span class="hljs-meta">@Id</span>  <br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span>  <br>    <span class="hljs-keyword">private</span> Long id;  <br>    <span class="hljs-keyword">private</span> String name;  <br>    <span class="hljs-meta">@CreatedDate</span>  <br>    <span class="hljs-keyword">private</span> Date createTime;  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>写接口继承 JpaRepository&lt;User, Long&gt;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User, Long&gt; &#123;  <br>  <br>    <span class="hljs-comment">// 根据方法命名规则自动生成查询：SELECT * FROM users WHERE username = ?  </span><br>    User <span class="hljs-title function_">findByname</span><span class="hljs-params">(<span class="hljs-meta">@Param(&quot;name&quot;)</span> String username)</span>;  <br>  <br>  <br>    <span class="hljs-comment">// 使用原生 SQL 查询  </span><br>    <span class="hljs-meta">@Query(value = &quot;SELECT * FROM users WHERE email = ?1&quot;, nativeQuery = true)</span>  <br>    User <span class="hljs-title function_">findByEmailNative</span><span class="hljs-params">(String email)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在service中进行调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><br>  <br><span class="hljs-meta">@Service</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImp</span> &#123;  <br>  <br>    <span class="hljs-meta">@Resource</span>  <br>    <span class="hljs-keyword">private</span> UserRepository userRepository;  <br>  <br>    <span class="hljs-comment">//使用父接口的方法  </span><br>    <span class="hljs-keyword">public</span> List&lt;User&gt; <span class="hljs-title function_">getAllUser</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span>  userRepository.findAll();  <br>    &#125;  <br>  <br>    <span class="hljs-comment">//使用根据名称生成接口的方法  </span><br>    <span class="hljs-keyword">public</span> User <span class="hljs-title function_">findUserByName</span><span class="hljs-params">(String name)</span>&#123;  <br>        <span class="hljs-keyword">return</span> userRepository.findByname(name);  <br>    &#125;  <br>  <br>  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>测试</p></li></ol><h2 id="三、整合mybatis-plus"><a href="#三、整合mybatis-plus" class="headerlink" title="三、整合mybatis-plus"></a>三、整合mybatis-plus</h2><p>参考这个<br><a href="https://baomidou.com/getting-started/">https://baomidou.com/getting-started/</a></p><h2 id="四-整合redis"><a href="#四-整合redis" class="headerlink" title="四 整合redis"></a>四 整合redis</h2><h3 id="1-redis-入门使用"><a href="#1-redis-入门使用" class="headerlink" title="1. redis 入门使用"></a>1. redis 入门使用</h3><h4 id="a-下载并启动"><a href="#a-下载并启动" class="headerlink" title="a. 下载并启动"></a>a. 下载并启动</h4><p>windows到这里下载 <a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a><br>解压<br>命令行 输入 ：redis-server.exe 打开redis服务<br>    输入： redis-cli.exe 进行连接</p><h4 id="b-redis-的数据类型"><a href="#b-redis-的数据类型" class="headerlink" title="b. redis 的数据类型"></a>b. redis 的数据类型</h4><ul><li>string</li><li>hash</li><li>set</li><li>list</li><li>zset</li></ul><p>基本的命令：<br><a href="http://doc.redisfans.com/">http://doc.redisfans.com/</a></p><h3 id="2-spring-data-redis"><a href="#2-spring-data-redis" class="headerlink" title="2. spring-data-redis"></a>2. spring-data-redis</h3><h4 id="a-基础操作"><a href="#a-基础操作" class="headerlink" title="a.基础操作"></a>a.基础操作</h4><p>spring-data-redis 提供了redisTemplate 来操作redis</p><p>通过<br>redisTemplarte.opsForValue 可操作string类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">redisTemplate.opsForValue.set(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br>redisTemplate.opsForValue.set(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>, <span class="hljs-number">30</span>, TimeUnit.SECONDS);<br>redisTemplate.opsForValue.setIfAbsent(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;value&quot;</span>);<br><br><br><br><span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> (String) redisTemplate.opsForValue.get(<span class="hljs-string">&quot;key&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250514161905.png" alt="image.png"></p><h4 id="b-实例"><a href="#b-实例" class="headerlink" title="b. 实例"></a>b. 实例</h4><ol><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">  <br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br><span class="hljs-attr">redis:</span>  <br>  <span class="hljs-attr">host:</span> <span class="hljs-string">localhost</span>  <br>  <span class="hljs-attr">port:</span> <span class="hljs-number">6379</span>  <br>  <span class="hljs-attr">database:</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ol start="3"><li>直接使用redistemplate 进行测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">class</span> <span class="hljs-title class_">UserServiceImpTest</span> &#123;  <br>  <br>    <span class="hljs-meta">@Resource</span>  <br>    RedisTemplate redisTemplate;  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRedis</span><span class="hljs-params">()</span> &#123;  <br>        redisTemplate.opsForValue().set(<span class="hljs-string">&quot;cheems&quot;</span>, <span class="hljs-string">&quot;111&quot;</span>);  <br>        System.out.println(redisTemplate.opsForValue().get(<span class="hljs-string">&quot;cheems&quot;</span>));  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>thymeleaf</title>
    <link href="/2025/05/14/java/Springboot/springboot-thymeleaf/"/>
    <url>/2025/05/14/java/Springboot/springboot-thymeleaf/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-thymeleaf"><a href="#springboot-thymeleaf" class="headerlink" title="springboot-thymeleaf"></a>springboot-thymeleaf</h1><p>这个就更没啥用了。前后端分离了都</p><h1 id="需要注意的概念"><a href="#需要注意的概念" class="headerlink" title="需要注意的概念"></a>需要注意的概念</h1><ul><li>themeleaf 是使用java开发的</li></ul><h2 id="一、thmeleaf-常用th属性"><a href="#一、thmeleaf-常用th属性" class="headerlink" title="一、thmeleaf 常用th属性"></a>一、thmeleaf 常用th属性</h2><ul><li>th</li></ul><h2 id="二、-themeleaf-的标准表达式"><a href="#二、-themeleaf-的标准表达式" class="headerlink" title="二、 themeleaf 的标准表达式"></a>二、 themeleaf 的标准表达式</h2>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web应用支持</title>
    <link href="/2025/05/14/java/Springboot/springboot-web%E5%BA%94%E7%94%A8%E6%94%AF%E6%8C%81/"/>
    <url>/2025/05/14/java/Springboot/springboot-web%E5%BA%94%E7%94%A8%E6%94%AF%E6%8C%81/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-web应用支持"><a href="#springboot-web应用支持" class="headerlink" title="springboot-web应用支持"></a>springboot-web应用支持</h1><p>介绍 1. 两种方式注册java web 三大组件  2. springboot管理mvc 3. 文件上传 4. 异常处理</p><p>实现对web应用的开发支持</p><h2 id="一、注册javaweb三大组件（没啥用，一般也不会用传统javaweb做请求，都是用mvc直接）"><a href="#一、注册javaweb三大组件（没啥用，一般也不会用传统javaweb做请求，都是用mvc直接）" class="headerlink" title="一、注册javaweb三大组件（没啥用，一般也不会用传统javaweb做请求，都是用mvc直接）"></a>一、注册javaweb三大组件（没啥用，一般也不会用传统javaweb做请求，都是用mvc直接）</h2><p>javaweb 三大组件包括： servlet， filter，listener<br>默认springboot不会自动将组件注册到容器中，需要我们手动进行<br>常用的两种方式：</p><ul><li>注解扫描</li><li>Bean注册</li></ul><h3 id="1-注解扫描"><a href="#1-注解扫描" class="headerlink" title="1. 注解扫描"></a>1. 注解扫描</h3><ol><li><p>在主启动类上加入@ServletComponentScan注解，表示开启web的组件扫描</p><ul><li>也可以使用配置文件来进行注册bean</li></ul></li><li><p>注册各个组件</p><ul><li>servlet <ul><li>新建servlet类，继承httpsevlet</li><li>加上注解 <code>@WebServlet（urlPartterns= “/path”）</code> ，就会自动扫描并注册</li></ul></li><li>filter<ul><li>新建filter类，继承filter</li><li>在Filter类上添加<code>@WebFilter(urlPatterns = &quot;/path&quot;)</code>注解。</li></ul></li><li>listener<ul><li>新建listener类，继承ServletContextListener</li><li>在Listener类上添加<code>@WebListener</code>注解。</li></ul></li></ul></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ServletComponentScan</span>  <br><span class="hljs-meta">@SpringBootApplication</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Springboot01Application</span> &#123;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        SpringApplication.run(Springboot01Application.class, args);  <br>    &#125;  <br>  <br>&#125;<br><br><br><br><span class="hljs-meta">@WebServlet(urlPatterns = &quot;/path&quot;)</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;  <br>        System.out.println(<span class="hljs-string">&quot;doGet111111111111111111&quot;</span>);  <br>        resp.getWriter().write(<span class="hljs-string">&quot;Hello Servlet&quot;</span>);  <br>    &#125;  <br>&#125;<br><br></code></pre></td></tr></table></figure><p>使用配置类的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;  <br>  <br>    <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> MyServlet <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Bean注册"><a href="#2-Bean注册" class="headerlink" title="2. Bean注册"></a>2. Bean注册</h3><ol><li>依然需要一个servlet&#x2F;listener&#x2F;filter 类 ， 不需要 加注解</li><li>新建一个配置类<ul><li>servlet：使用bean注入的方式 返回ServletRegistrationBean对象 即可注册</li><li>filter ：使用bean注入的方式 返回FilterRegistrationBean 即可注册</li><li>listen：使用bean注入的方式 ServletListenerRegistrationBean 即可注册</li></ul></li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;  <br>        System.out.println(<span class="hljs-string">&quot;doGet111111111111111111&quot;</span>);  <br>        resp.getWriter().write(<span class="hljs-string">&quot;Hello Servlet&quot;</span>);  <br>    &#125;  <br>&#125;<br><br><br><br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;  <br>  <br>   <span class="hljs-meta">@Bean</span>  <br>    <span class="hljs-keyword">public</span> ServletRegistrationBean&lt;MyServlet&gt; <span class="hljs-title function_">myServlet</span><span class="hljs-params">()</span> &#123;  <br>       ServletRegistrationBean&lt;MyServlet&gt; myServletServletRegistrationBean = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletRegistrationBean</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyServlet</span>(), <span class="hljs-string">&quot;/myServlet&quot;</span>);  <br>       myServletServletRegistrationBean.setLoadOnStartup(<span class="hljs-number">1</span>); <span class="hljs-comment">// 设置启动顺序  </span><br>       <span class="hljs-keyword">return</span> myServletServletRegistrationBean;  <br>   &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二、springmvc配置"><a href="#二、springmvc配置" class="headerlink" title="二、springmvc配置"></a>二、springmvc配置</h2><p>springboot 提供了mvc 默认配置，包括自动注册视图解析器，自动对静态资源处理等<br>我们需要了解如何自定义mvc 的配置<br>包括：</p><ul><li>静态资源映射</li><li>视图控制</li><li>拦截器</li></ul><h3 id="1-静态资源映射（没啥用，前后端分离了都）"><a href="#1-静态资源映射（没啥用，前后端分离了都）" class="headerlink" title="1. 静态资源映射（没啥用，前后端分离了都）"></a>1. 静态资源映射（没啥用，前后端分离了都）</h3><h4 id="a-默认处理"><a href="#a-默认处理" class="headerlink" title="a. 默认处理"></a>a. 默认处理</h4><p>web应用中，导入静态资源后，需要配置资源映射，否则无法访问</p><p>在springboot中，会自动从以下路径查找<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250514125952.png" alt="image.png"></p><h4 id="b-自定义处理"><a href="#b-自定义处理" class="headerlink" title="b.自定义处理"></a>b.自定义处理</h4><p>对于不在这些路径中的静态文件，依然想要访问，可以自定义映射</p><p>有两种：</p><ol><li>通过配置类</li><li>通过配置文件</li></ol><h5 id="1）-配置类"><a href="#1）-配置类" class="headerlink" title="1） 配置类"></a>1） 配置类</h5><ol><li>新建配置类，实现WebMvcConfigurer 接口，重写addResourceHandlers 方法</li></ol><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addResourceHandlers</span><span class="hljs-params">(ResourceHandlerRegistry registry)</span> &#123;  <br>        registry.addResourceHandler(<span class="hljs-string">&quot;/resources/**&quot;</span>).addResourceLocations(<span class="hljs-string">&quot;/resources/&quot;</span>);   <br>        WebMvcConfigurer.<span class="hljs-built_in">super</span>.addResourceHandlers(registry);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2) 配置文件"></a>2) 配置文件</h5><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">mvc:</span>  <br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/backend/**</span>  <br>  <span class="hljs-attr">web:</span>  <br>    <span class="hljs-attr">resources:</span>  <br>      <span class="hljs-attr">static-locations:</span> <span class="hljs-string">classpath:/META-INF/resources/backend/,</span> <span class="hljs-string">classpath:/resources/backend/</span><br></code></pre></td></tr></table></figure><h3 id="2-配置视图处理器（没啥用，前后端分离了都）"><a href="#2-配置视图处理器（没啥用，前后端分离了都）" class="headerlink" title="2. 配置视图处理器（没啥用，前后端分离了都）"></a>2. 配置视图处理器（没啥用，前后端分离了都）</h3><p>springmvc 开发中，无业务的跳转视图也需要创建controller类，比较麻烦<br>可以在视图控制器中添加映射，直接将请求转为视图</p><ol><li>实现WebMvcConfigurer 接口的配置类中，addViewControllers 方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addViewControllers</span><span class="hljs-params">(ViewControllerRegistry registry)</span> &#123;  <br>    registry.addViewController(<span class="hljs-string">&quot;/login&quot;</span>).setViewName(<span class="hljs-string">&quot;login&quot;</span>);  <br>    WebMvcConfigurer.<span class="hljs-built_in">super</span>.addViewControllers(registry);  <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-配置拦截器"><a href="#3-配置拦截器" class="headerlink" title="3. 配置拦截器"></a>3. 配置拦截器</h3><p>拦截器可以根据请求的URL对请求进行拦截，主要应用于登录校验、权限验证、乱码解决、性能监控<br>和异常处理等方面。在SpringBoot项目中配置拦截器也非常简单，只需要定义拦截器和注册拦截器<br>即可。</p><ol><li>新建一个拦截器 实现 HandlerInterceptor 接口， 重写preHandle 方法</li><li>注册拦截器<ol><li>在实现WebMvcConfigurer 接口的配置类中，重写addInterceptors方法</li></ol></li></ol><p>示例：<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">   <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInterceptor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">HandlerInterceptor</span> &#123;  <br>  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">preHandle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>  <br>        System.out.println(<span class="hljs-string">&quot;preHandle：进入到拦截器方法中&quot;</span>);  <br>        <span class="hljs-keyword">return</span> HandlerInterceptor.<span class="hljs-built_in">super</span>.preHandle(request, response, handler);  <br>    &#125;  <br>&#125;<br><br><br><span class="hljs-meta">@Configuration</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addInterceptors</span><span class="hljs-params">(InterceptorRegistry registry)</span> &#123;  <br>        registry.addInterceptor(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInterceptor</span>()).addPathPatterns(<span class="hljs-string">&quot;/**&quot;</span>);  <br>        WebMvcConfigurer.<span class="hljs-built_in">super</span>.addInterceptors(registry);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></p><h2 id="三、-文件上传"><a href="#三、-文件上传" class="headerlink" title="三、 文件上传"></a>三、 文件上传</h2><h3 id="1-文件上传的流程"><a href="#1-文件上传的流程" class="headerlink" title="1.文件上传的流程"></a>1.文件上传的流程</h3><p>前端表单：</p><ul><li>必须为post </li><li>单文件使用&lt;input type&#x3D;”file” name&#x3D;”file”&gt;</li><li>多文件使用： &lt;input type&#x3D;”file” name&#x3D;”files” multiple&gt;</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/upload&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span> <span class="hljs-attr">enctype</span>=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;上传&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端接收：</p><ol><li>yml文件中修改可上传的最大值<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span>  <br>  <span class="hljs-attr">servlet:</span>  <br>    <span class="hljs-attr">multipart:</span>  <br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">10MB</span>  <span class="hljs-comment"># 默认只有1M</span><br></code></pre></td></tr></table></figure></li><li>创建controller 进行接收</li></ol><ul><li>使用MultipartFile 接收文件<ul><li>给出接收的文件名</li><li>使用File 对象进行接收 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-meta">@PostMapping(&quot;/upload&quot;)</span>  <br><span class="hljs-meta">@ResponseBody</span>  <br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">upload</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> &#123;  <br>    <span class="hljs-keyword">if</span> (file.isEmpty()) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;文件为空&quot;</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> UUID.randomUUID()+ file.getOriginalFilename();  <br>        <span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(System.getProperty(<span class="hljs-string">&quot;user.dir&quot;</span>)+<span class="hljs-string">&quot;\\&quot;</span>+fileName);  <br>        file.transferTo(dest);  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传成功&quot;</span>;  <br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;上传失败&quot;</span>;  <br>    &#125;  <br>  <br>  <br>&#125;<br><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="四、异常处理"><a href="#四、异常处理" class="headerlink" title="四、异常处理"></a>四、异常处理</h2><h3 id="1-全局异常处理"><a href="#1-全局异常处理" class="headerlink" title="1. 全局异常处理"></a>1. 全局异常处理</h3><p>程序出现异常就终止程序，我们不希望程序终止<br>所以要对所有的异常进行处理，使得程序不中断</p><h4 id="a-操作步骤"><a href="#a-操作步骤" class="headerlink" title="a. 操作步骤"></a>a. 操作步骤</h4><ol><li>创建全局异常处理类  使用@RestControllerAdvice  注解</li><li>使用@ExceptionHandler(RuntimeException.class)   标注异常的处理方法<ol><li>这个方法的返回值可以是任意类型，推荐自定义的返回类型</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestControllerAdvice</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span>  &#123;  <br>  <br>  <br>    <span class="hljs-meta">@ExceptionHandler(RuntimeException.class)</span>  <br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">runtimeException</span><span class="hljs-params">(RuntimeException e)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现了运行时异常&quot;</span>;  <br>    &#125;  <br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-自定义异常"><a href="#2-自定义异常" class="headerlink" title="2. 自定义异常"></a>2. 自定义异常</h3><ul><li>继承 runtimeexception</li><li>使用全局异常处理进行捕捉<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyException</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;  <br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code   <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyException</span><span class="hljs-params">(<span class="hljs-type">int</span> code,String message)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(message);  <br>        <span class="hljs-built_in">this</span>.code = code;  <br>    &#125;  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-keyword">return</span> code;  <br>    &#125;  <br>  <br>&#125;<br><br><span class="hljs-meta">@RestControllerAdvice</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GlobalExceptionHandler</span>  &#123;  <br>  <br>    <span class="hljs-meta">@ExceptionHandler(MyException.class)</span>  <br>    <span class="hljs-keyword">public</span>  String <span class="hljs-title function_">MyException</span><span class="hljs-params">(MyException e)</span> &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;出现了自定义的异常异常&quot;</span>+e.getMessage()+e.getCode();  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>es基础</title>
    <link href="/2025/05/13/java/elastic%20search/es%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/13/java/elastic%20search/es%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="es基础"><a href="#es基础" class="headerlink" title="es基础"></a>es基础</h1><p>官方文档： <a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.6/documents-indices.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.6/documents-indices.html</a></p><h2 id="核心流程："><a href="#核心流程：" class="headerlink" title="核心流程："></a>核心流程：</h2><p>es系列会讲 </p><ol><li>es的介绍（包括本身，创始人）</li><li>与其他搜索引擎技术的对比</li><li>es的生态圈</li><li>基本的操作</li><li>springboot集成</li><li>实战</li><li>面试题</li></ol><h2 id="一、-luceue"><a href="#一、-luceue" class="headerlink" title="一、 luceue"></a>一、 luceue</h2><p>Lucene是一套信息检索工具包！jar包！不包含搜索引擎系统！<br>包含的：索引结构！读写索引的工具！排序，搜索规则….工具类！<br>Lucene和ElasticSearch关系：<br>    ElasticSearch是基于Lucene做了一些封装和增强（我们上手是十分简单！）</p><h2 id="二、-概述"><a href="#二、-概述" class="headerlink" title="二、 概述"></a>二、 概述</h2><p>es是一个开源的高扩展的<em><strong>分布式全文检索</strong></em>引擎，可以实现实时存储，检索数据等<br>提供：全文搜索，结构化搜索，分析等</p><p>es生态：</p><ul><li>kibana</li><li>logstash</li><li>Beats</li><li>es</li></ul><p>一些使用es的实例：</p><ul><li>各大搜索引擎（google ，百度）</li><li>博客网站（stack overflow）</li><li>github</li></ul><h2 id="三、es-与solr的区别"><a href="#三、es-与solr的区别" class="headerlink" title="三、es 与solr的区别"></a>三、es 与solr的区别</h2><ol><li>es开箱即用，solr需要配置</li><li>es自身支持分布式，solr需要集成zookeeper</li><li>es仅支持json, solr支持json xml csv等</li><li>es本身更注重核心功能的实现，高级功能由第三方插件实现，solr自身功能很多</li><li>solr 查询快，但是更新索引慢（插入删除慢），用于电商查询多<ol><li>es 建立索引快，即插入删除更快，用于新浪等搜索</li></ol></li></ol><h2 id="四、es-安装"><a href="#四、es-安装" class="headerlink" title="四、es 安装"></a>四、es 安装</h2><h3 id="1-下载并解压"><a href="#1-下载并解压" class="headerlink" title="1. 下载并解压"></a>1. 下载并解压</h3><p><a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.17/zip-windows.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.17/zip-windows.html</a></p><h3 id="2-目录结构"><a href="#2-目录结构" class="headerlink" title="2. 目录结构"></a>2. 目录结构</h3><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250515134111.png" alt="image.png"></p><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3. 启动"></a>3. 启动</h3><ol><li><p>在bin目录 执行 <code>elasticsearch.bat</code><br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250515134323.png" alt="image.png"></p></li><li><p>浏览器打开：localhost：9200</p></li></ol><h3 id="4-安装可视化插件-elasticsearch-head"><a href="#4-安装可视化插件-elasticsearch-head" class="headerlink" title="4. 安装可视化插件  elasticsearch-head"></a>4. 安装可视化插件  elasticsearch-head</h3><p>这是一个基于前端的可视化面板，就像rabbimq的可视化面板一样</p><h4 id="a-安装"><a href="#a-安装" class="headerlink" title="a. 安装"></a>a. 安装</h4><ol><li>下载</li></ol><p>安装es-head<br><a href="https://github.com/mobz/elasticsearch-head/releases/tag/v5.0.0">https://github.com/mobz/elasticsearch-head/releases/tag/v5.0.0</a><br>解压</p><ol start="3"><li><p>启动前端<br>在解压后的目录中执行 <code>npm install</code>   <code>npm run start</code></p></li><li><p>处理跨域<br>es 的配置文件&#x2F;config&#x2F;elasticsearch.yml配置文件中配置<br>http.cors.enabled: true<br>http.cors.allow-origin: “x”</p></li><li><p>重启es</p></li><li><p>点击连接</p></li></ol><h3 id="5-安装kibana"><a href="#5-安装kibana" class="headerlink" title="5. 安装kibana"></a>5. 安装kibana</h3><p>kibana是es的分析和可视化平台，对数据做分析用。<br>我们要用到dev tools 来进行语法测试</p><h4 id="a-安装-1"><a href="#a-安装-1" class="headerlink" title="a.安装"></a>a.安装</h4><ol><li><p>下载版本要与es一样  并解压<br><a href="https://www.elastic.co/downloads/past-releases#kibana">https://www.elastic.co/downloads/past-releases#kibana</a></p></li><li><p>进入bin目录  输入命令 <code>kibana.bat</code></p></li><li><p>访问网址 <a href="http://localhost:5601/app/home#/">http://localhost:5601/app/home#/</a>  进入面板</p></li></ol><h2 id="五、-es核心概念-（与关系型数据库相比）"><a href="#五、-es核心概念-（与关系型数据库相比）" class="headerlink" title="五、 es核心概念 （与关系型数据库相比）"></a>五、 es核心概念 （与关系型数据库相比）</h2><ul><li>与mysql 的区别对比</li></ul><table><thead><tr><th>mysql</th><th>es</th></tr></thead><tbody><tr><td>数据库</td><td>索引（8版本这个代表表，数据库这个概念没了）</td></tr><tr><td>表</td><td>类型（8版本这个弃用）</td></tr><tr><td>行</td><td>文档</td></tr><tr><td>列</td><td>字段</td></tr><tr><td>行列形成的二维表</td><td>json格式</td></tr></tbody></table><h2 id="六、ik-分词器"><a href="#六、ik-分词器" class="headerlink" title="六、ik 分词器"></a>六、ik 分词器</h2><h3 id="1-什么是ik分词器"><a href="#1-什么是ik分词器" class="headerlink" title="1. 什么是ik分词器"></a>1. 什么是ik分词器</h3><p>分词是指将一句话&#x2F;一段话拆成 n个字一组，形成一个字典，查询时，根据这个字典反过来查到对应的话&#x2F;段落&#x2F;文章<br>ik分词器是支持中文的分词器，有两种模式 ik_max  ik_smart</p><h3 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h3><ol><li>安装<br>这里下载 <a href="https://release.infinilabs.com/analysis-ik/stable/">https://release.infinilabs.com/analysis-ik/stable/</a></li><li>解压到plugins目录下<br>压缩包不要在这个目录留</li><li>重启es</li></ol><h3 id="3-使用"><a href="#3-使用" class="headerlink" title="3. 使用"></a>3. 使用</h3><ol><li><p>打开kibana的devl tools</p></li><li><p>输入</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _analyze       <br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;这里是狂神说java&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>发现我们想要的 狂神说 为一个词，但是他把拆开了</p></li></ol><ul><li>解决：<ol><li>打开plugin&#x2F;插件名&#x2F;config<ul><li>可以看到所有的dic 都是一个词典，里面各种词</li><li>IKAnalyzer.cfg.xml 这是一个配置文件，这里可以加我们自定义的词典</li></ul></li><li>新建词典<ol><li>新建my.dic 输入 狂神说</li></ol></li><li>在xml中配置<ol><li>&lt;entry key&#x3D;”ext_dict”&gt;my.dic&lt;&#x2F;entry&gt;</li></ol></li><li>重启</li><li>再次测试 ，发现狂神说为一个词</li></ol></li></ul><ol start="3"><li>输入<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _analyze<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_max_word&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;这里是狂神说java&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure></li></ol><ul><li>发现这两种模式：<ul><li>ik_max_word 是尽最大可能去分词，分出多种</li><li>ik_smart 是更加合适的分词</li></ul></li><li>选择在创建时 使用ik_max_word<ul><li>搜索时使用 ik_smart</li></ul></li></ul><h2 id="七、restful风格调用"><a href="#七、restful风格调用" class="headerlink" title="七、restful风格调用"></a>七、restful风格调用</h2><p>es支持restful风格的调用</p><p>put 表示创建<br>post 后不同参数 可以不同操作<br>get 查询<br>delete 删除</p><h3 id="1-对索引的操作"><a href="#1-对索引的操作" class="headerlink" title="1. 对索引的操作"></a>1. 对索引的操作</h3><h4 id="a-创建索引"><a href="#a-创建索引" class="headerlink" title="a. 创建索引"></a>a. 创建索引</h4><ul><li><p>创建索引并插入一条数据，数据的类型es会自己猜测 </p></li><li><p>对于已有的索引会覆盖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;苏海峰&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>创建不带数据的索引，同时指定数据类型  </p></li><li><p>对于已有的索引不可重复创建</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;age&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;integer&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="b-更新索引"><a href="#b-更新索引" class="headerlink" title="b.更新索引"></a>b.更新索引</h4><ul><li>使用PUT进行覆盖<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;苏海峰&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;3&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;hobby&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;ctrl&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>数据及索引都发生了变更</li></ul><h4 id="c-删除索引"><a href="#c-删除索引" class="headerlink" title="c. 删除索引"></a>c. 删除索引</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE /test<br></code></pre></td></tr></table></figure><h4 id="d-查询索引"><a href="#d-查询索引" class="headerlink" title="d. 查询索引"></a>d. 查询索引</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /test<br></code></pre></td></tr></table></figure><h4 id="e-查询基本信息"><a href="#e-查询基本信息" class="headerlink" title="e. 查询基本信息"></a>e. 查询基本信息</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _cat<br></code></pre></td></tr></table></figure><p>可以看到cat可以查询的一些参数</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET _cat/health<br></code></pre></td></tr></table></figure><h3 id="2-对文档的操作"><a href="#2-对文档的操作" class="headerlink" title="2. 对文档的操作"></a>2. 对文档的操作</h3><h4 id="a-创建文档"><a href="#a-创建文档" class="headerlink" title="a.创建文档"></a>a.创建文档</h4><ul><li>使用put<br>put 索引&#x2F;_doc&#x2F;文档<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><br>PUT test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;这里是cheems&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="b-更新文档"><a href="#b-更新文档" class="headerlink" title="b.更新文档"></a>b.更新文档</h4><ul><li>put 也可以进行更新，直接替换掉文档<br>代码见 [[#b.更新索引]]</li><li>post +update  局部字段更新<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">POST test/_doc/<span class="hljs-number">1</span>/_update<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;这里是cheems&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;13&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="c-删除文档"><a href="#c-删除文档" class="headerlink" title="c.删除文档"></a>c.删除文档</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">DELETE test/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="d-查询文档"><a href="#d-查询文档" class="headerlink" title="d.查询文档"></a>d.查询文档</h4><h5 id="1-根据id-查"><a href="#1-根据id-查" class="headerlink" title="1)根据id 查"></a>1)根据id 查</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">GET test/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h5 id="2-构造条件查询"><a href="#2-构造条件查询" class="headerlink" title="2) 构造条件查询"></a>2) 构造条件查询</h5><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /索引名/_search <br><span class="hljs-punctuation">&#123;</span> <br><span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br> <span class="hljs-attr">&quot;查询类型&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;查询条件&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;值&quot;</span> <br>  <span class="hljs-punctuation">&#125;</span> <br><span class="hljs-punctuation">&#125;</span> <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /test/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;法外狂徒&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><ul><li><p>match 是<em><strong>查询类型</strong></em>，表示全文检索查询， 先分词再查询 ， 所以输入不完整也是可以根据分好的词查到的</p></li><li><p>term  直接查询 不分词</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /test/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;法外狂徒&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>multi_match 多字段查询</p></li><li><p>range 数值或日期匹配  不能匹配text，否则结果不对</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><br>GET /head/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;2&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;30&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>bool 复合查询</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /head/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <br>          <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;法外狂徒&quot;</span><span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span> <br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span><br>       <br>         <span class="hljs-punctuation">&#123;</span><br>           <span class="hljs-attr">&quot;range&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>             <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>               <span class="hljs-attr">&quot;lt&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;8&quot;</span><br>             <span class="hljs-punctuation">&#125;</span><br>         <span class="hljs-punctuation">&#125;</span><br>         <br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>除了must 与 must_not , 还有 or ，表示有一个就行</p><ul><li>分页</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /head/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>          <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;法外狂徒&quot;</span><span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span> <br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>from 与size 类似于 limit 0 1 </p><ul><li>排序<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /head/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <br>          <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;法外狂徒&quot;</span><span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span> <br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><br>  <span class="hljs-attr">&quot;sort&quot;</span> <span class="hljs-punctuation">:</span><br>  <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>按年龄升序排列</li><li>高亮<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /head/_doc/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><br>        <br>          <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;法外狂徒&quot;</span><span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">&#125;</span> <br>        <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>     <br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;pre_tags&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&lt;p style=&#x27;color:red&#x27;&gt;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;post_tags&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;&lt;/p&gt;&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="八、springboot集成es"><a href="#八、springboot集成es" class="headerlink" title="八、springboot集成es"></a>八、springboot集成es</h2><p>使用spring - data 集成<br><a href="https://docs.spring.io/spring-data/elasticsearch/docs/4.4.10/reference/html/">https://docs.spring.io/spring-data/elasticsearch/docs/4.4.10/reference/html/</a></p><h3 id="1-集成步骤"><a href="#1-集成步骤" class="headerlink" title="1. 集成步骤"></a>1. 集成步骤</h3><ol><li><p>导包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>yml 配置es地址  默认就是 localhost：9200 也可以不设置</p></li><li><p>使用</p></li></ol><p>使用有两种：</p><ul><li>使用ElasticsearchRepository 提供的接口方法<ul><li>同时还支持根据方法名生成方法</li></ul></li><li>自己构造查询条件来查询</li></ul><h4 id="a-使用使用ElasticsearchRepository"><a href="#a-使用使用ElasticsearchRepository" class="headerlink" title="a. 使用使用ElasticsearchRepository"></a>a. 使用使用ElasticsearchRepository</h4><ol><li><p>写实体类</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">  <br>@Data  <br>@Document(indexName = <span class="hljs-string">&quot;user1&quot;</span>)   <span class="hljs-comment">// 索引名</span><br>public class User <span class="hljs-punctuation">&#123;</span>  <br>  <br>    @Id          <br>    private String id;  <br>  <br>    @Field(type = FieldType.Text)       指定字段类型<br>    private String name;  <br>    @Field(type = FieldType.Keyword)  <br>    private int age;  <br>  <br>  <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>写一个mapper 继承这个类，操作mapper</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Repository</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ElasticsearchRepository</span>&lt;User, String&gt; &#123;  <br>    User <span class="hljs-title function_">findUserByName</span><span class="hljs-params">(String username)</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>测试</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.cheems.springbootes;  <br>  <br><span class="hljs-keyword">import</span> com.cheems.springbootes.mapper.UserMapper;  <br><span class="hljs-keyword">import</span> com.cheems.springbootes.pojo.User;  <br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.MatchQueryBuilder;  <br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilder;  <br><span class="hljs-keyword">import</span> org.elasticsearch.index.query.QueryBuilders;  <br><span class="hljs-keyword">import</span> org.junit.jupiter.api.Test;  <br><span class="hljs-keyword">import</span> org.springframework.boot.test.context.SpringBootTest;  <br><span class="hljs-keyword">import</span> org.springframework.data.domain.Page;  <br><span class="hljs-keyword">import</span> org.springframework.data.domain.PageRequest;  <br><span class="hljs-keyword">import</span> org.springframework.data.domain.Pageable;  <br><span class="hljs-keyword">import</span> org.springframework.data.domain.Sort;  <br><span class="hljs-keyword">import</span> org.springframework.data.elasticsearch.core.query.NativeSearchQueryBuilder;  <br>  <br><span class="hljs-keyword">import</span> javax.annotation.Resource;  <br><span class="hljs-keyword">import</span> java.util.ArrayList;  <br><span class="hljs-keyword">import</span> java.util.Date;  <br><span class="hljs-keyword">import</span> java.util.List;  <br><span class="hljs-keyword">import</span> java.util.Optional;  <br>  <br><span class="hljs-meta">@SpringBootTest</span>  <br>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EsTest</span> &#123;  <br>    <span class="hljs-meta">@Resource</span>  <br>    <span class="hljs-keyword">private</span> UserMapper userMapper;  <br>  <br>  <br>    <span class="hljs-comment">//新增  </span><br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();  <br>        user.setId(<span class="hljs-string">&quot;1&quot;</span>);  <br>        user.setName(<span class="hljs-string">&quot;张三&quot;</span>);  <br>        user.setAge(<span class="hljs-number">18</span>);  <br>  <br>        userMapper.save(user);  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 批量新增  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testaddall</span><span class="hljs-params">()</span>&#123;  <br>        List&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();  <br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;  <br>            <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();  <br>            user.setId(<span class="hljs-string">&quot;&quot;</span>+i);  <br>  <br>            user.setName(<span class="hljs-string">&quot;cheems&quot;</span>+i);  <br>            user.setAge(i);  <br>  <br>            users.add(user);  <br>  <br>        &#125;  <br>        Iterable&lt;User&gt; users1 = userMapper.saveAll(users);  <br>        <span class="hljs-keyword">for</span> (User user : users1) &#123;  <br>            System.out.println(user);  <br>        &#125;  <br>  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 更新  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testupdate</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-comment">//在之前更新与创建 是 put 与post 都可以做，所以es的更新与创建是一个方法save  </span><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();  <br>        user.setId(<span class="hljs-string">&quot;1&quot;</span>);  <br>        user.setName(<span class="hljs-string">&quot;&lt;UNK&gt;&quot;</span>);  <br>        user.setAge(<span class="hljs-number">20</span>);  <br>        userMapper.save(user);  <br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 删除  </span><br><span class="hljs-comment">     */</span>  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testdelete</span><span class="hljs-params">()</span>&#123;  <br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();  <br>        user.setId(<span class="hljs-string">&quot;1&quot;</span>);  <br>        <span class="hljs-comment">//方法一： userMapper.delete(user);  </span><br>        <span class="hljs-comment">// 方法二  </span><br>       userMapper.deleteById(<span class="hljs-string">&quot;2&quot;</span>);  <br>  <br>       <span class="hljs-comment">//批量删除与创建一致  </span><br><span class="hljs-comment">//        userMapper.deleteAll();  </span><br><span class="hljs-comment">//        userMapper.deleteAllById();  </span><br>    &#125;  <br>  <br>    <span class="hljs-comment">/**  </span><br><span class="hljs-comment">     * 查找  </span><br><span class="hljs-comment">     */</span>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testget</span><span class="hljs-params">()</span>&#123;  <br>  <br>        <span class="hljs-comment">//根据id差  </span><br>        Optional&lt;User&gt; user = userMapper.findById(<span class="hljs-string">&quot;3&quot;</span>);  <br>        System.out.println(user);  <br>        System.out.println(<span class="hljs-string">&quot;=====================&quot;</span>);  <br>        <span class="hljs-comment">//查所有  </span><br>        userMapper.findAll().forEach(System.out::println);  <br>  <br>  <br>        <span class="hljs-comment">//自定义方法  </span><br>        System.out.println(<span class="hljs-string">&quot;******************&quot;</span>);  <br>        <span class="hljs-type">User</span> <span class="hljs-variable">cheems</span> <span class="hljs-operator">=</span> userMapper.findUserByName(<span class="hljs-string">&quot;cheems1&quot;</span>);  <br>        System.out.println(cheems);  <br>  <br>  <br>        System.out.println(<span class="hljs-string">&quot;***************&quot;</span>);  <br>        <span class="hljs-comment">//分页  </span><br>        <span class="hljs-type">PageRequest</span> <span class="hljs-variable">pageRequest</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>);  <br>        Page&lt;User&gt; users = userMapper.findAll(pageRequest);  <br>        System.out.println(<span class="hljs-string">&quot;当前页数据&quot;</span>+users.getContent());  <br>        System.out.println(<span class="hljs-string">&quot;总页数&quot;</span>+users.getTotalElements());  <br>        System.out.println(<span class="hljs-string">&quot;总记录数&quot;</span>+users.getTotalPages());  <br>  <br>  <br>        <span class="hljs-comment">//排序  </span><br>  <br>        System.out.println(<span class="hljs-string">&quot;----------------------&quot;</span>);  <br>  <br>        <span class="hljs-type">Sort</span> <span class="hljs-variable">sort</span> <span class="hljs-operator">=</span> Sort.by(<span class="hljs-string">&quot;age&quot;</span>).ascending();  <br>  <br>        <span class="hljs-keyword">for</span> (User user1 : userMapper.findAll(sort)) &#123;  <br>            System.out.println(user1);  <br>        &#125;  <br>  <br>        <span class="hljs-comment">//分页+排序  </span><br>  <br>        System.out.println(<span class="hljs-string">&quot;-------------------------&quot;</span>);  <br>  <br>        <span class="hljs-type">Pageable</span> <span class="hljs-variable">pageablewithSort</span> <span class="hljs-operator">=</span> PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, Sort.by(<span class="hljs-string">&quot;age&quot;</span>).descending());  <br>  <br>        users = userMapper.findAll(pageablewithSort);  <br>        System.out.println(<span class="hljs-string">&quot;分页+排序结果&quot;</span>+users.getContent());  <br>   <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure><h4 id="b-使用QueryBuilders自己构造"><a href="#b-使用QueryBuilders自己构造" class="headerlink" title="b. 使用QueryBuilders自己构造"></a>b. 使用QueryBuilders自己构造</h4><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250515201627.png" alt="image.png"></p><p>实例：</p><ol><li><p>范围查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-meta">@SpringBootTest</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TesteS</span> &#123;  <br>  <br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> ElasticsearchOperations operations;  <br>  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>  <br>        <span class="hljs-type">RangeQueryBuilder</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> QueryBuilders.rangeQuery(<span class="hljs-string">&quot;age&quot;</span>).gt(<span class="hljs-number">1</span>).lt(<span class="hljs-number">5</span>);  <br>  <br>            <span class="hljs-comment">//链式编程， 可以一直拼接  </span><br>        <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQueryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()  <br>                .must(id)  <br>                .mustNot(QueryBuilders.matchQuery(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">5</span>));  <br>                ;  <br>  <br>  <br>                <span class="hljs-comment">//最后用一个nativeSearchQuery转换一下  </span><br>        <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">nativeSearchQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQuery</span>(boolQueryBuilder);  <br>        SearchHits&lt;User&gt; search = operations.search(nativeSearchQuery, User.class);  <br>  <br>        search.getSearchHits().forEach(System.out::println);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>高亮</p></li></ol><p>首先需要在实体类中将字段标注注解@HighlightField<br>先通过highlightBuilder.Field 配置高亮</p><p>在NativeSearchQueryBuilder中将高亮加上，将查询加上<br>执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">  <br><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span> &#123;  <br>  <br>    HighlightBuilder.<span class="hljs-type">Field</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>.Field(<span class="hljs-string">&quot;name&quot;</span>).preTags(<span class="hljs-string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/em&gt;&quot;</span>);  <br>  <br>  <br>  <br>    <span class="hljs-type">QueryBuilder</span> <span class="hljs-variable">queryBuilder</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery()  <br>            .must(QueryBuilders.matchQuery(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;cheems1&quot;</span>));  <br>    <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">nativeSearchQuery</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>()  <br>            .withQuery(queryBuilder)  <br>            .withHighlightFields(name)  <br>            .build();  <br>    SearchHits&lt;User&gt; search = operations.search(nativeSearchQuery, User.class);  <br>    search.getSearchHits().forEach(System.out::println);  <br>  <br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>分页+排序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span> &#123;  <br>    <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">build</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQueryBuilder</span>()  <br>            .withQuery(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;age&quot;</span>).gt(<span class="hljs-number">1</span>).lt(<span class="hljs-number">5</span>))  <br>            .withPageable(PageRequest.of(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>))  <br>            .withSort(SortBuilders.fieldSort(<span class="hljs-string">&quot;age&quot;</span>).order(SortOrder.DESC))  <br>            .build();  <br>  <br>    SearchHits&lt;User&gt; search = operations.search(build, User.class);  <br>    search.getSearchHits().forEach(System.out::println);  <br>  <br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>最后学一下流式计算处理结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;Book&gt; <span class="hljs-title function_">searchWithHighlight</span><span class="hljs-params">(String keyword)</span> &#123;<br>    <span class="hljs-type">HighlightBuilder</span> <span class="hljs-variable">highlightBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span><br>        .field(<span class="hljs-string">&quot;title&quot;</span>)<br>        .preTags(<span class="hljs-string">&quot;&lt;em&gt;&quot;</span>).postTags(<span class="hljs-string">&quot;&lt;/em&gt;&quot;</span>);  <span class="hljs-comment">// 设置高亮标签</span><br>    <br>    <span class="hljs-type">NativeSearchQuery</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeSearchQuery</span>(<br>        QueryBuilders.matchQuery(<span class="hljs-string">&quot;title&quot;</span>, keyword)<br>    ).addHighlightedFields(highlightBuilder);<br>    <br>    <span class="hljs-keyword">return</span> operations.search(query, Book.class).getSearchHits.stream<br>        .map(hit -&gt; &#123;<br>            <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> hit.getContent;<br>            Map&lt;String, List&lt;String&gt;&gt; highlights = hit.getHighlightedFields;<br>            book.setTitle(highlights.get(<span class="hljs-string">&quot;title&quot;</span>).get(<span class="hljs-number">0</span>));  <span class="hljs-comment">// 替换高亮内容</span><br>            <span class="hljs-keyword">return</span> book;<br>        &#125;).collect(Collectors.toList);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>elasticsearch</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LL（1）文法</title>
    <link href="/2025/05/13/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/LL%EF%BC%881%EF%BC%89%E6%96%87%E6%B3%95/"/>
    <url>/2025/05/13/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/LL%EF%BC%881%EF%BC%89%E6%96%87%E6%B3%95/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>课程</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正规式与有穷自动机</title>
    <link href="/2025/05/13/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E6%AD%A3%E8%A7%84%E5%BC%8F%E4%B8%8E%E6%9C%89%E7%A9%B7%E8%87%AA%E5%8A%A8%E6%9C%BA/"/>
    <url>/2025/05/13/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E6%AD%A3%E8%A7%84%E5%BC%8F%E4%B8%8E%E6%9C%89%E7%A9%B7%E8%87%AA%E5%8A%A8%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="正规式与有穷自动机"><a href="#正规式与有穷自动机" class="headerlink" title="正规式与有穷自动机"></a>正规式与有穷自动机</h1><p>本文会介绍正规式-&gt; 正规文法 -&gt; 状态转换图</p><h2 id="一、正规式与-状态转换图"><a href="#一、正规式与-状态转换图" class="headerlink" title="一、正规式与 状态转换图"></a>一、正规式与 状态转换图</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><ul><li><p>正规式是指： 描述字符串集合的表达式，由字母表的字符与运算符组成</p><ul><li>例如  （a|b）</li></ul></li><li><p>正规集：正规式产生的字符的集合</p><ul><li>例如： （a|b） &#x3D; {a,b}</li></ul></li><li><p>正规文法：前面的 3型文法 分为左线型与右线型</p></li><li><p>正规语言： 正规文法生成的语言</p></li><li><p>有穷自动机： 包括NFA 和 DFA  用五元组来定义， 可以输入字符串，判断是否符合文法</p></li></ul><p>D&#x3D; {K,$\Sigma$,M,S,F}<br>状态， 即非终结符<br>可接受的字符集合<br>转换函数<br>初态</p><p>NFA ：<br>转移函数允许多路径转移与 $\epsilon$ 转移<br>初态有多个<br>导致<em><strong>输入一个确定的字符，可能有多个输出结果</strong></em></p><ul><li>状态转换图： 图形化表示有穷状态机的结构</li></ul><h3 id="2-关系"><a href="#2-关系" class="headerlink" title="2. 关系"></a>2. 关系</h3><p>正规式  –&gt; 正规集</p><p>正规式  &lt;-&gt; 正规文法   &lt;-&gt; 状态转换图</p><p>正规文法  &lt;-&gt; 有穷自动机</p><p>正规式 -&gt; NFA -&gt; DFA -&gt; 状态转换图 -&gt; 词法分析器</p><h3 id="3-正规集的运算"><a href="#3-正规集的运算" class="headerlink" title="3. 正规集的运算"></a>3. 正规集的运算</h3><ol><li>a*   {$\epsilon$,a,aa,aaa,…}    闭包</li><li>(a|b)*  &#x3D; {a,b}*         </li><li>(a|b)* (aa|bb)(a|b)*  中间有一个连续的a&#x2F;b的字符串</li></ol><h3 id="4-相互转换"><a href="#4-相互转换" class="headerlink" title="4. 相互转换"></a>4. 相互转换</h3><ol><li>正规文法 -&gt; 状态转换图</li></ol><p>左线性文法的产生式形式为：  </p><ul><li>左线型文法为规约</li><li>起始状态对应文法的标识符</li><li>每个非终结符代表一个状态</li></ul><p>A -&gt; Ba   A 是一个状态，B是一个状态   ，规约: B -a&gt; A<br>A -&gt; a    A 是一个状态， 另一个状态就是起始态  规约  ：  S -a&gt; A<br>两个圈表示终态</p><p>将文法的每个状态转换写出来，然后连接</p><h2 id="二、NFA的确定化"><a href="#二、NFA的确定化" class="headerlink" title="二、NFA的确定化"></a>二、NFA的确定化</h2><p>子集标记法<br>通过循环枚举，找出所有的可能，形成DFA</p>]]></content>
    
    
    <categories>
      
      <category>课程</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>配置</title>
    <link href="/2025/05/13/java/Springboot/springboot%E9%85%8D%E7%BD%AE/"/>
    <url>/2025/05/13/java/Springboot/springboot%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot配置"><a href="#springboot配置" class="headerlink" title="springboot配置"></a>springboot配置</h1><p>将介绍 </p><ol><li>对自动配置的类如何进行 自定义的配置<ul><li>比如： 默认的端口号是8080， 我不想要这个要如何设置</li></ul></li><li>进行属性注入</li><li>多环境配置</li></ol><h2 id="一、全局配置文件"><a href="#一、全局配置文件" class="headerlink" title="一、全局配置文件"></a>一、全局配置文件</h2><p>springboot 有两个默认的全局配置文件： </p><ul><li>application.properties</li><li>application.yml</li></ul><h3 id="1-application-properties"><a href="#1-application-properties" class="headerlink" title="1. application.properties"></a>1. application.properties</h3><p>采用 key &#x3D;value 的格式进行配置<br>当value 有多个值时，用逗号隔开</p><h3 id="2-application-yml"><a href="#2-application-yml" class="headerlink" title="2. application.yml"></a>2. application.yml</h3><p>使用层级缩进 来进行配置</p><p>有多个值时 使用缩进依次填写<br>如：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">hobby:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">唱</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">跳</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">rap</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">篮球</span><br></code></pre></td></tr></table></figure><h3 id="3-配置文件的优先级"><a href="#3-配置文件的优先级" class="headerlink" title="3. 配置文件的优先级"></a>3. 配置文件的优先级</h3><p>springboot可以在多个位置存在默认配置文件<br>从优先级最高到最低：</p><ul><li>file:&#x2F;config&#x2F;*&#x2F;</li><li>file:.&#x2F;config&#x2F;</li><li>file:.&#x2F;</li><li>classpath:&#x2F;config&#x2F;</li><li>classpath:&#x2F;</li></ul><p>其中properties 的优先级 高于yml<br>存在相同配置时，高优先级会覆盖低优先级， 如果高优先级没有这项配置，低优先级中有的配置就会生效</p><h2 id="二、配置绑定"><a href="#二、配置绑定" class="headerlink" title="二、配置绑定"></a>二、配置绑定</h2><h3 id="1-配置注入"><a href="#1-配置注入" class="headerlink" title="1. 配置注入"></a>1. 配置注入</h3><p>设置了配置属性后，可以将其注入到bean对象中<br>有两种方法：</p><ul><li><p>@Value 注解可以将配置文件中的配置绑定到bean对象的属性上</p></li><li><p>@ConfigurationProperties 注解 批量将配置文件中以特定前缀命名的属性输入到bean对象上</p></li><li><p>两者的不同</p></li></ul><table><thead><tr><th>@Value</th><th>@ConfigurationProperties</th></tr></thead><tbody><tr><td>只能单个注入</td><td>支持批量注入</td></tr><tr><td>不需要setter</td><td>需要setter</td></tr><tr><td>spring框架提供</td><td>springboot框架提供</td></tr></tbody></table><h2 id="三、-多环境配置"><a href="#三、-多环境配置" class="headerlink" title="三、 多环境配置"></a>三、 多环境配置</h2><p>实际开发中，需要有多套环境配置， 比如开发环境需要管理面板，线上环境不能打开管理面板等。<br>因此多套环境是有必要的</p><h3 id="1-配置多套环境"><a href="#1-配置多套环境" class="headerlink" title="1. 配置多套环境"></a>1. 配置多套环境</h3><p>默认的配置文件为 application.yml ， 我们可以使用  application-{profile}.yml 来拆分不同环境的配置文件<br>如： application-local.yml，  application-dev.yml 等</p><p>这样就有了多套环境<br>如何选择使用那个环境呢?  在yml文件中 spring.profiles.active：profile 指定激活对应的环境</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>入门</title>
    <link href="/2025/05/13/java/Springboot/%E5%85%A5%E9%97%A8/"/>
    <url>/2025/05/13/java/Springboot/%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="springboot-入门"><a href="#springboot-入门" class="headerlink" title="springboot 入门"></a>springboot 入门</h1><p>本文会讲解 为什么需要springboot， springboot入门案例，原理解析，单元测试，项目打包he运行等<br>形成一个完整的开发流程，了解基本的springboot的操作</p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ul><li>springboot出现的原因：spirng配置繁杂且与业务无关</li><li>入门案例</li><li>原理解析</li><li>单元测试</li><li>打包运行</li></ul><h2 id="一、springboot出现原因及其历史"><a href="#一、springboot出现原因及其历史" class="headerlink" title="一、springboot出现原因及其历史"></a>一、springboot出现原因及其历史</h2><p>在springboot之前，大家都是用spring，但是spirng配置繁杂且配置与业务无关。<br>有人就使用注解对spring进行了封装，简化了spring框架的使用，产生了springboot</p><p>后来微服务爆火，快速构建一个spring应用成为刚需，springboot框架完美解决了这个问题</p><h3 id="1-springboot的特性"><a href="#1-springboot的特性" class="headerlink" title="1. springboot的特性"></a>1. springboot的特性</h3><ul><li>可快速建立独立的spring应用</li><li>直接嵌入了tomcat web容器，无需部署war文件</li><li>start依赖，简化了配置构建</li><li>自动配置</li><li>约定大于配置的思想</li></ul><h2 id="二、入门案例"><a href="#二、入门案例" class="headerlink" title="二、入门案例"></a>二、入门案例</h2><h3 id="1-使用idea-springboot直接构建"><a href="#1-使用idea-springboot直接构建" class="headerlink" title="1. 使用idea springboot直接构建"></a>1. 使用idea springboot直接构建</h3><ol><li>点击new project</li><li>选择springboot</li><li>将url替换为 <a href="https://start.aliyun.com/">https://start.aliyun.com</a></li><li>填入项目名，jdk版本等</li><li>选择spring web </li><li>创建</li></ol><h3 id="2-构建一个普通maven项目，添加springboot依赖构建"><a href="#2-构建一个普通maven项目，添加springboot依赖构建" class="headerlink" title="2. 构建一个普通maven项目，添加springboot依赖构建"></a>2. 构建一个普通maven项目，添加springboot依赖构建</h3><ol><li>新建一个普通maven项目</li><li>在pom文件引入父项目<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>引入web依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>写一个主启动类<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        SpringApplication.run(Main.class, args);  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure></li><li>写一个controller 进行测试</li></ol><h2 id="三、springboot原理解析"><a href="#三、springboot原理解析" class="headerlink" title="三、springboot原理解析"></a>三、springboot原理解析</h2><h3 id="1-起步依赖"><a href="#1-起步依赖" class="headerlink" title="1. 起步依赖"></a>1. 起步依赖</h3><h4 id="a-概念"><a href="#a-概念" class="headerlink" title="a. 概念"></a>a. 概念</h4><p>起步依赖是springboot 提供的特殊的maven依赖，封装了特定功能所需要的所有相关的库<br>比如： spring- boot-start-web 包含： spring-web，spring-aop，spring-webmvc等，导入一个就导入了相关的所有。</p><blockquote><p>有一种maven的思想的进一步使用</p></blockquote><h4 id="b-作用："><a href="#b-作用：" class="headerlink" title="b.作用："></a>b.作用：</h4><ul><li>简化依赖导入：只需导入一个</li><li>版本统一：通过Spring Boot的父POM（<code>spring-boot-starter-parent</code>）统一管理所有依赖的版本，避免版本冲突。</li><li>自动配置：根据类路径中的依赖自动注册Bean并完成配置，减少XML或注解的重复编写。</li></ul><h4 id="c-原理"><a href="#c-原理" class="headerlink" title="c. 原理"></a>c. 原理</h4><p>本质是 maven 的依赖传递机制<br>例如 引入 spring- boot-start-web，会自动引入spring-web，spring-aop，spring-webmvc等</p><h4 id="d-区分parent-与其他start"><a href="#d-区分parent-与其他start" class="headerlink" title="d. 区分parent 与其他start"></a>d. 区分parent 与其他start</h4><p>虽然这两个都简化了配置，但是功能不同</p><p>parent 定义了很多个常见组件的依赖版本号，不直接导入依赖<br>普通的starter： 定义了若干坐标，直接引入依赖</p><p>springboot官方实现的starter， spring-boot-starter-xxx<br>其他springboot没有实现，由第三实现的 starter  xxx-spring-boot-starter  且导入需要版本号</p><h3 id="2-自动配置"><a href="#2-自动配置" class="headerlink" title="2. 自动配置"></a>2. 自动配置</h3><p>概述： springboot 采用约定大于配置的思想，将项目可能会遇到的配置信息现提前配置好，写在自动配置的jar包中，当项目运行时，自动检测项目类路径下所有的依赖的jar包，将检测到的Bean注册到spring容器中去，根据检测到的依赖进行自动配置</p><h4 id="a-springbootApplication注解"><a href="#a-springbootApplication注解" class="headerlink" title="a. springbootApplication注解"></a>a. springbootApplication注解</h4><p>它包含了三个注解<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250513083029.png" alt="image.png"></p><ul><li><p>@SpringBootConfiguration<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250513083155.png" alt="image.png"></p></li><li><p>@EnableAutoConfiguration<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250513084853.png" alt="image.png"><br>@Import({AutoConfigurationImportSelector.class})<br>（1）从SpringBoot自动配置JAR包的META-INF&#x2F;spring.facto<br>ries和META-INF&#x2F;spring&#x2F;org.springframework.boot.autocon<br>figure.AutoConfiguration.imports文件中获取所有候选自动配<br>置类。<br>(2）根据项目pom.xml文件中加入的依赖筛选出最终符合当前<br>项目运行环境对应的自动配置类。</p></li><li><p>@ComponentScan<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250513085100.png" alt="image.png"><br>组件包扫描器，其主要作用是扫描指定包及其子包下所有注解类文件作为Spring容器 组件使用。</p></li></ul><h3 id="3-执行流程"><a href="#3-执行流程" class="headerlink" title="3. 执行流程"></a>3. 执行流程</h3><p>springApplication 的run（）方法，调用了另一个重载的run方法，被调用的重载run（）方法内部执行了两个操作，分别是1. 创建springApplication容器     2.调用run方法</p><h5 id="1-创建springApplication容器"><a href="#1-创建springApplication容器" class="headerlink" title="1. 创建springApplication容器"></a>1. 创建springApplication容器</h5><ol><li>初始化资源加载器</li><li>初始化资源类集合</li><li>推断当前web容器类型</li><li>设置上下文初始化器</li><li>设置监听器</li><li>推断主应用类</li></ol><p>初始化资源，推断web容器类型，设置上下文初始化器</p><h5 id="2-调用run方法"><a href="#2-调用run方法" class="headerlink" title="2.调用run方法"></a>2.调用run方法</h5><ol><li>创建并刷新ApplicationContext<ol><li>创建应用上下文，加载配置类he自动配置类，注册bean并执行依赖注入的初始化操作</li></ol></li><li>启动嵌入式web服务器</li><li>发布应用已启动事件，对应监听事件会触发</li><li>执行CommandLineRunner和ApplicationRunner</li><li>发布ready事件、应用启动完成 <ol><li>·触发ApplicationReadyEvent，应用进入运行状态，处理业务请求或任务。</li></ol></li></ol><p>创建刷新应用上下文，加载配置类，启动监听器，通知监听器</p><h2 id="四、单元测试"><a href="#四、单元测试" class="headerlink" title="四、单元测试"></a>四、单元测试</h2><p>在test类中使用@springbootTest注解即可</p><h2 id="五、-部署与打包"><a href="#五、-部署与打包" class="headerlink" title="五、 部署与打包"></a>五、 部署与打包</h2><h3 id="1-打包为jar包"><a href="#1-打包为jar包" class="headerlink" title="1. 打包为jar包"></a>1. 打包为jar包</h3><p>概念：将代码源文件组织成一个可执行文件交付给他人使用</p><p>流程：</p><ol><li>在maven中添加打包插件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">mainClass</span>&gt;</span>com.cheems.springboot01.Springboot01Application<span class="hljs-tag">&lt;/<span class="hljs-name">mainClass</span>&gt;</span> <br>        <span class="hljs-tag">&lt;<span class="hljs-name">skip</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skip</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span>  <br>                <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>repackage<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span>  <br>            <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span>  <br>        <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>使用maven进行打包</li><li>使用java -jar jar包名 即可运行</li></ol><p>如果报错： 没有主清单属性， 将打包插件的 &lt;skip&gt;true &lt;&#x2F;skip&gt; 删掉</p><h3 id="2-打包为war包"><a href="#2-打包为war包" class="headerlink" title="2. 打包为war包"></a>2. 打包为war包</h3><p>每个jar包都包含独立的web容器，对服务器的消耗较大， 特别是微服务时<br>将其打成war包，分别部署在服务器上，可减少资源的消耗</p><p>步骤：</p><ol><li>在pom文件中声明打包方式为war<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.cheems<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springboot-01<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span>     <span class="hljs-comment">&lt;!-- 就是这一行--&gt;</span><br></code></pre></td></tr></table></figure></li><li>排除内置的tomcat</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>spring-boot-starter-tomcat<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="3"><li><p>添加插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">finalName</span>&gt;</span>springboot-war<span class="hljs-tag">&lt;/<span class="hljs-name">finalName</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">groupld</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupld</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactld</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactld</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改springboot启动类<br>没有tomcat了 要重写一下</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
      <category>springboot</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概论、符号串与语法</title>
    <link href="/2025/05/12/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E6%A6%82%E8%AE%BA%E3%80%81%E7%AC%A6%E5%8F%B7%E4%B8%B2%E4%B8%8E%E8%AF%AD%E6%B3%95/"/>
    <url>/2025/05/12/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E6%A6%82%E8%AE%BA%E3%80%81%E7%AC%A6%E5%8F%B7%E4%B8%B2%E4%B8%8E%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><p>本文将介绍编译原理的概论，符号与符号串，文法，句型分析等</p><h2 id="一、概论"><a href="#一、概论" class="headerlink" title="一、概论"></a>一、概论</h2><p>编译原理是 讲 程序如何经过编译最终变为可执行文件进行执行的原理</p><ol><li><p>什么是编译程序</p><ul><li>编译程序是翻译程序，将源代码翻译为目标代码的程序</li><li>如： 将c语言代码翻译为汇编语言</li></ul></li><li><p>编译程序执行的逻辑过程</p><ol><li>词法分析</li><li>语法分析</li><li>语义分析</li><li>中间代码生成与优化</li><li>目标代码生成<br>虽然说是这样的逻辑过程， 但是并不是严格按照这个顺序<br>比如： 在进行语法分析时可能已经进行了中间代码的生成</li></ol></li></ol><blockquote><p>需要理解的概念<br>源程序：程序员写好的程序<br>目标程序：最终可执行的程序</p></blockquote><h2 id="二、符号与符号串"><a href="#二、符号与符号串" class="headerlink" title="二、符号与符号串"></a>二、符号与符号串</h2><h3 id="1-字母表，符号，符号串，空串-，符号的长度"><a href="#1-字母表，符号，符号串，空串-，符号的长度" class="headerlink" title="1.字母表，符号，符号串，空串 ，符号的长度"></a>1.字母表，符号，符号串，空串 ，符号的长度</h3><p>字母表: 符号的集合， 如 $\Sigma$ &#x3D;{a,b,c} a ，b，c都是是符号<br>符号串（字符串）:符号的任意组合，如： a，ab，aac都是$\Sigma$ 的符号串<br>空串： 没有字符的串， 用 $\epsilon$表示<br>符号串的长度： |ab| &#x3D; 2  |$\epsilon$|&#x3D;0<br>子串： 对原串进行截取，得到的就是子串 ， 如 x&#x3D;abc  a，ab，abc 都是子串，但bc , $\epsilon$ 都不是</p><h3 id="2-符号串的运算"><a href="#2-符号串的运算" class="headerlink" title="2.符号串的运算"></a>2.符号串的运算</h3><ul><li><p>符号串的连接  .<br>如 x &#x3D;ab  y &#x3D;cd  xy&#x3D;abcd  就是把两个写一起</p></li><li><p>符号串的方幂（闭包） *<br>z&#x3D; $x^n$  是把 x 写n次<br>如  x的1 次 &#x3D; x   $x^2$ &#x3D; xx   $x^0$ &#x3D; *$\epsilon$</p></li><li><p>符号串的选择  |</p></li></ul><p>r|s 表示r 或者s</p><h3 id="3-符号串的集合"><a href="#3-符号串的集合" class="headerlink" title="3. 符号串的集合"></a>3. 符号串的集合</h3><ul><li>概念： 若集合A中所有元素都是字母表 $\Sigma$ 中的符号串，则称A是 $\Sigma$ 上的符号串集合<ul><li>例如：  $\Sigma$  &#x3D;{1,2,3} A &#x3D;{12,13,23}</li></ul></li><li>表示：<ul><li>穷举表示</li><li>省略表示</li><li>描述表示法</li></ul></li><li>空集：不含任何的集合，包括空串</li></ul><p>运算：</p><ul><li>两个符号串集合的乘积 ：AB &#x3D;  {xy| x属于A 且 y 属于B}  即 两个集合元素的连接<ul><li>如  A &#x3D;{1,2} B&#x3D; {3,4}   AB&#x3D;{13,14,23,24}</li></ul></li><li>闭包: 表示 $\Sigma$ 上一切长度为n（n&gt;0）的符号串的集合<br>$$<br>\Sigma^* &#x3D; \Sigma^0 U \Sigma ^1 …. U \Sigma^n<br>$$</li><li>正闭包： 闭包去掉  $\Sigma$ 0</li></ul><h2 id="三、文法与语言"><a href="#三、文法与语言" class="headerlink" title="三、文法与语言"></a>三、文法与语言</h2><h3 id="1-文法"><a href="#1-文法" class="headerlink" title="1.文法"></a>1.文法</h3><ul><li><p>产生式：用   –&gt; 或者 ：：&#x3D; 表示定义为或者产生为</p></li><li><p>文法的定义：G定义为四元组  （$V_N ,V_T,P,S$）</p><ul><li>Vn 表示非终结符</li><li>Vt表示 终结符</li><li>p 表示 产生式</li><li>s表示 标识符</li></ul></li><li><p>Vn U Vt &#x3D; v  字汇表</p></li><li><p>vn 与vt 相交是空集</p></li><li><p>在表示时，只需要用产生式来代表这个文法， 我们规定第一条产生式的左部是标识符</p></li><li><p>一个上下文无关文法的例子   | 表示或者</p></li></ul><p>$G[标识符] :   &lt;标识符&gt; –&gt;  &lt;字母&gt;$<br>        $&lt;标识符&gt; –&gt; &lt;标识符&gt;&lt;字母&gt;$<br>        $&lt;字母&gt; –&gt; a|b|c|d…|z$<br>这就是一个用产生式表示文法的例子</p><h3 id="2-使用文法"><a href="#2-使用文法" class="headerlink" title="2.使用文法"></a>2.使用文法</h3><p>我们已经知道了文法， 文法要如何使用呢</p><p>已知：<br>    v&#x3D;233&lt;字母&gt;66            w&#x3D;233a66<br>    产生式： &lt;字母&gt; -&gt; a </p><p>可以知道： v 通过产生式（文法）可以推导到w，  我们称v 可以<em><strong>直接推导</strong></em>w  用 v &#x3D;&gt; w<br>或者也可以称 w <em><strong>规约</strong></em>到v    </p><p>这种一步就可以推导到的， <em><strong>推导长度</strong></em>为1    即v &#x3D;&gt; w   n&#x3D;1<br>自己推导自己的，  用 v &#x3D;v 表示 没有用到产生式 n &#x3D;0<br>相应的还有多步推导</p><p>递归推导： 如果 非终结符出现在了产生式的右侧，则一直使用这个规则可以使得推导无限进行下去，这种叫做递归推导</p><h4 id="句型，句子，文法，语言"><a href="#句型，句子，文法，语言" class="headerlink" title="句型，句子，文法，语言"></a>句型，句子，文法，语言</h4><ul><li>句型：对于文法 G（Z） ，字汇表v ，若 Z的多步推导 为x ， x属于字汇表的闭包 ， 则称x为句型<ul><li>可以理解为句型是文法推导的中间态，还不是一个完整的句子</li></ul></li><li>句子： x 属于终结符的闭包<ul><li>就是完整的句子</li></ul></li><li>文法： 生成句子的规则</li><li>语言：所有合法句子的集合</li><li>类比：<ul><li>英语中<ul><li>文法： 句子-&gt; 主语+谓语</li><li>句型： 句子 → 主语 + 谓语 → (名词短语) + 谓语   这不是一个完整的句子</li><li>句子:   句子 → 主语 + 谓语 → (名词短语) + 谓语  → (the cat) + (runs) 对这里才是完整的句子</li><li>语言： 就是这个文法所能推出的所有的句子</li></ul></li></ul></li></ul><h3 id="3-文法分类"><a href="#3-文法分类" class="headerlink" title="3.文法分类"></a>3.文法分类</h3><p>分为 </p><ul><li>0 型文法</li><li>1型文法</li><li>2型文法（上下文无关文法）： 规定 每条生成式满足：非终结符在左部，又不是非终结+终结</li><li>3型文法（正规文法）<ul><li>规定 每条生成式都满足： 非终结符 -&gt;终结符  或者 非终结符 -&gt; 终结符+非终结符（右线型文法）   或者  非终结符 -&gt; 非终结符+终结符（左线型文法）</li></ul></li></ul><h2 id="四、文法分析树"><a href="#四、文法分析树" class="headerlink" title="四、文法分析树"></a>四、文法分析树</h2><p>现有文法：<br>$G[S]： s-&gt; aAB$<br>    $A-&gt;Ba|a$<br>    $B-bd$<br>对应推导过程： S -&gt; aAB -&gt; aBaB -&gt; abdaB -&gt; abdabd<br>则能画出<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512204810.png" alt="image.png"></p><ul><li>根节点是开始符号</li><li>分支： 有分支一定是非终结符，反之不一定</li><li><em><strong>子树</strong></em>： 树根及其向下的部分， 比如 A及其下面的所有都是S的子树</li><li><em><strong>简单子树</strong></em>：只有一层的子树，比如B  ，0或多都不行</li></ul><p>上面的推导中 A-&gt;Ba|a  中使用了Ba这条规则，一种最左推导</p><ul><li><em><strong>最左推导</strong></em>：每次都替换左边的非终结符</li><li><em><strong>最右推导</strong></em>（规范推导）： 每次替换右边的非终结符<ul><li>得到的是规范句型</li></ul></li></ul><p>还有是从最后的 abdabd 往前推， 直到S，这种叫<em><strong>规约</strong></em>，就是推导的逆过程</p><p><em><strong>二义性</strong></em><br>句子的二义性： 句子有两颗语法分析树，则称改句子为二义性句子<br>文法二义性： 存在有二义性的句子<br>语言： 句子全是二义性句子，则语言为二义性语言</p><h2 id="五、句型分析"><a href="#五、句型分析" class="headerlink" title="五、句型分析"></a>五、句型分析</h2><p>分析： 是从左到右识别符号串<br>分析算法：</p><ul><li>自底向上： 不断规约直到标识符</li><li>自顶向下： 不断推导直到输入串<br>相比之下：自底向上更符合程序设计的思想</li></ul><p>根据自底向上分析算法提出：</p><ul><li>短语: 子树的末端符号串是相对于子树根的短语</li><li>简单短语：简单子树的……………………………..</li><li>句柄： 最左简单子树的末端符号串构成句柄</li></ul><blockquote><p>例题：</p></blockquote><p>现有文法：<br>$G[S]： s-&gt; aAB$<br>    $A-&gt;Ba|a$<br>    $B-bd$<br>对应推导过程： S -&gt; aAB -&gt; aBaB -&gt; abdaB -&gt; abdabd<br>则能画出<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512204810.png" alt="image.png"></p><p>abdabd的短语： </p><ol><li>找非终结符： 定位子树  S A B</li><li>短语： <ol><li>abdabd 是句型abdabd相对于子树S的短语</li><li>bda 是句型abdabd 相对于子树A的短语</li><li>bd是句型abdabd 相对于子树B的短语</li></ol></li><li>简单短语：<ol><li>从短语中选择</li><li>bd是句型abdabd相对于子树B的简单短语</li></ol></li><li>句柄：<ol><li>bd 是句型abdabd 相对于子树B的句柄</li></ol></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>讲述了 一些基础的概念，包括符号串，文法，句子，语言， 如何分析句子等</p><p>从这里也可以看到，编译程序大概是要我们写的程序输入进去，对句子进行分析，后续应该还要进行判断，输出一些什么</p>]]></content>
    
    
    <categories>
      
      <category>课程</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/05/12/PowerToys_Paste_20250512134651/"/>
    <url>/2025/05/12/PowerToys_Paste_20250512134651/</url>
    
    <content type="html"><![CDATA[<span style="color: rgb(102, 102, 102); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Tahoma, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Simsun, sans-serif; font-size: large; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">免费评个分支持一下感</span><!--EndFragment-->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+obsidian的实践</title>
    <link href="/2025/05/11/%E5%BB%BA%E7%AB%99/hexo-obsidian%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/05/11/%E5%BB%BA%E7%AB%99/hexo-obsidian%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）"><a href="#使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）" class="headerlink" title="使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）"></a>使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）</h1><p>本文将介绍如何配置Obsidian作为Hexo博客的写作工具，并通过集成Terminal、PicGo、CDN以及GitHub图床，实现高效的文章撰写、图片管理和一键发布流程。</p><h2 id="核心流程概述"><a href="#核心流程概述" class="headerlink" title="核心流程概述"></a>核心流程概述</h2><ul><li><strong>快捷发布</strong>：集成Terminal到Obsidian中，使用<code>Ctrl+T</code>快速打开终端执行Hexo命令。</li><li><strong>图片管理</strong>：通过PicGo将图片自动上传至GitHub图床，并使用CDN加速访问。</li><li><strong>自动化</strong>：考虑使用QuickAdd和JS脚本简化博客创建与发布流程（本文重点介绍前三项）。</li></ul><h2 id="一、obsidian集成terminal"><a href="#一、obsidian集成terminal" class="headerlink" title="一、obsidian集成terminal"></a>一、obsidian集成terminal</h2><p>为了方便执行Hexo命令（如 <code>hexo new &quot;我的新文章&quot;</code>、<code>hexo g -d</code>），我们可以将Terminal集成到Obsidian中。</p><ol><li><strong>安装Terminal插件</strong>：<ul><li>在Obsidian的插件市场搜索并安装名为 “Terminal” 的插件。</li></ul></li><li><strong>修改快捷键</strong>：<ul><li>打开Obsidian的快捷键设置。</li><li>找到 <code>Ctrl+T</code> 原本的功能（通常是打开新标签页），将其移除或更改为其他快捷键。</li><li>将 “Terminal: Open terminal at vault root” (或类似描述，意为“打开根目录外部终端”) 的快捷键设置为 <code>Ctrl+T</code>。</li></ul></li><li><strong>使用</strong>：<ul><li>现在，按下 <code>Ctrl+T</code> 即可快速打开项目根目录的终端，方便执行Hexo相关命令。</li></ul></li></ol><h2 id="二、图片管理：Obsidian-PicGo-CDN-GitHub图床"><a href="#二、图片管理：Obsidian-PicGo-CDN-GitHub图床" class="headerlink" title="二、图片管理：Obsidian + PicGo + CDN + GitHub图床"></a>二、图片管理：Obsidian + PicGo + CDN + GitHub图床</h2><h3 id="1-PicGo-安装"><a href="#1-PicGo-安装" class="headerlink" title="1. PicGo 安装"></a>1. PicGo 安装</h3><p>PicGo是一款优秀的图床上传工具。</p><ol><li>访问 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo Releases 页面</a>。</li><li>找到并下载合适的版本（例如 <code>2.3.1</code>）。对于Windows用户，选择 <code>.exe</code> 安装文件。<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250511225036.png" alt="image.png"></li><li>按照提示完成安装。</li></ol><h3 id="2-PicGo-配置"><a href="#2-PicGo-配置" class="headerlink" title="2. PicGo 配置"></a>2. PicGo 配置</h3><h4 id="a-插件设置"><a href="#a-插件设置" class="headerlink" title="a. 插件设置"></a>a. 插件设置</h4><p>打开PicGo应用，进入设置界面：</p><ul><li>在“插件设置”中，我们可以选择显示的图床。由于我们主要使用GitHub，可以将其他不常用的图床取消勾选，以简化界面。<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250511225142.png" alt="image.png"></li></ul><ul><li>图床设置 -&gt; github  填入参数<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250511225606.png" alt="image.png"></li></ul><ul><li>**仓库名 (Repo)**：例如，你的GitHub仓库地址是 <code>https://github.com/your-username/your-repo-name</code>，则仓库名填写 <code>your-username/your-repo-name</code>。</li><li>**分支名 (Branch)**：通常是 <code>main</code> </li><li>**存储路径 (Path)**：可选，图片在仓库中存放的文件夹路径，例如 <code>img/</code> 或 <code>blog/images/</code>。如果填写，PicGo会在仓库根目录下创建此文件夹并存入图片。例如，填写 <code>resource/</code>，图片会存储在仓库的 <code>resource</code> 目录下。</li><li>**自定义域名 (Custom Domain)**：为了加速图片访问，推荐使用CDN。jsDelivr是一个免费好用的CDN，其格式为：<br><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@分支名</code><br>例如：<code>https://cdn.jsdelivr.net/gh/abcde/picture@main</code> (如果图片在仓库根目录)<br>如果设置了存储路径，例如 <code>resource/</code>，则自定义域名可以是：<br><code>https://cdn.jsdelivr.net/gh/abcde/picture@main</code> (PicGo会在上传后自动拼接上 <code>resource/图片名.png</code>)</li></ul><h4 id="b-生成-GitHub-Token"><a href="#b-生成-GitHub-Token" class="headerlink" title="b. 生成 GitHub Token"></a>b. 生成 GitHub Token</h4><p>PicGo需要GitHub Personal Access Token来进行仓库操作。</p><ol><li>登录GitHub，点击右上角头像 -&gt; “Settings”。</li><li>在左侧导航栏找到 “Developer settings”。</li><li>选择 “Personal access tokens” -&gt; “Tokens (classic)”。</li><li>点击 “Generate new token” -&gt; “Generate new token (classic)”。<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512091128.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512091358.png" alt="image.png"></li><li>**Note (Token描述)**：填写一个易于识别的名称，如 <code>PicGo for Obsidian Blog</code>。</li><li>**Expiration (有效期)**：根据需要选择，可以选择 “No expiration” (无过期时间)，但出于安全考虑，建议设置一个有效期。</li><li>**Select scopes (选择权限)**：勾选 <code>repo</code> 权限。这是操作仓库（包括上传文件）所必需的。</li><li>点击 “Generate token”。</li><li><strong>重要</strong>：立即复制生成的Token。这个Token只会显示一次，关闭页面后将无法再次查看。将其粘贴到PicGo中GitHub图床设置的 “Token” 字段。</li></ol><h3 id="3-Obsidian-集成-PicGo"><a href="#3-Obsidian-集成-PicGo" class="headerlink" title="3. Obsidian 集成 PicGo"></a>3. Obsidian 集成 PicGo</h3><p>为了实现在Obsidian中粘贴图片即自动上传的功能：</p><ol><li>在Obsidian的插件市场搜索并安装 “Image auto upload plugin” 插件。</li><li>配置该插件，使其与PicGo联动（通常是确保PicGo服务正在运行，插件会调用PicGo的API）。</li><li>现在，当你在Obsidian编辑器中粘贴图片时，它应该会自动通过PicGo上传到你配置好的GitHub图床，并替换为图床链接。</li></ol><h2 id="三、使用QuickAdd与JS脚本（可选）"><a href="#三、使用QuickAdd与JS脚本（可选）" class="headerlink" title="三、使用QuickAdd与JS脚本（可选）"></a>三、使用QuickAdd与JS脚本（可选）</h2><p>可以使用ai来将js写出来</p><hr><p>通过以上配置，你应该能够建立一个流畅的Obsidian + Hexo博客写作和发布流程了。</p>]]></content>
    
    
    <categories>
      
      <category>建站笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从hexo开始的个人博客</title>
    <link href="/2025/05/11/%E5%BB%BA%E7%AB%99/%E4%BB%8Ehexo%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/11/%E5%BB%BA%E7%AB%99/%E4%BB%8Ehexo%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用hexo搭建个人博客</h1><p>本文将介绍使用hexo搭建个人博客网站， 包括 安装hexo依赖的环境， 安装hexo，使用hexo，安装主题，部署发布等， 实现从0开始搭建个人博客网站</p><p>可以参考官方给出的教程 <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ul><li>环境搭建（node 与git 的安装， github 账号）</li><li>hexo基本使用（通过基本命令搭建一个helloworld页面，及如何写博客）</li><li>主题配置 </li><li>部署</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我部署时的环境：</p><ul><li>系统：windows 10 22hz</li><li>git ： 2.49.0</li><li>nvm： 1.2.2</li><li>node ： 18.20.0</li><li>hexo-cli: 4.3.2</li></ul><h2 id="一、安装hexo依赖的环境"><a href="#一、安装hexo依赖的环境" class="headerlink" title="一、安装hexo依赖的环境"></a>一、安装hexo依赖的环境</h2><p>需要安装 git 与 node </p><h3 id="1-git-的安装"><a href="#1-git-的安装" class="headerlink" title="1. git 的安装"></a>1. git 的安装</h3><p>为了与github 进行连接，需要安装git</p><ol><li>打开官网<a href="https://git-scm.com/downloads/win">Git - Downloading Package</a>，选择windows版本</li><li>打开安装程序 ，依次点击next进行安装</li><li>打开cmd ，输入git -v 测试<ul><li>若输出版本号则说明安装成功</li></ul></li></ol><h3 id="2-node-的安装"><a href="#2-node-的安装" class="headerlink" title="2. node 的安装"></a>2. node 的安装</h3><p>为了安装hexo 及其插件 需要安装node</p><h4 id="a-nvm-安装"><a href="#a-nvm-安装" class="headerlink" title="a.  nvm 安装"></a>a.  nvm 安装</h4><p>这里推荐使用nvm来进行安装node<br>nvm 是一个node 版本管理器，可以使用它来下载node环境</p><ol><li>从这个网站选择windows的安装包<a href="https://nvm.uihtm.com/doc/download-nvm.html">开始 下载nvm - nvm中文官网</a>，点击本地下载</li><li>下载后，依次点击next进行安装</li><li>安装完成后打开 cmd ， 输入 <code>nvm -v </code><ul><li>若输出版本号，则说明安装成功</li></ul></li></ol><h4 id="b-使用nvm安装node"><a href="#b-使用nvm安装node" class="headerlink" title="b. 使用nvm安装node"></a>b. 使用nvm安装node</h4><ol><li>打开cmd</li><li>输入 <code>nvm install 版本号</code>        进行node的安装<ul><li>如 <code>nvm install 18.20.0</code></li></ul></li><li>输入 <code>nvm use 18.20.0</code>  使用该版本的node</li><li>输入 <code>node -v</code><ul><li>若输出版本号 则说明安装成功</li></ul></li></ol><h2 id="二、使用hexo本地搭建"><a href="#二、使用hexo本地搭建" class="headerlink" title="二、使用hexo本地搭建"></a>二、使用hexo本地搭建</h2><p>在本地计算机中搭建hexo</p><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h3><ol><li>打开cmd ，输入命令 <code>npm install -g hexo-cli</code> 进行安装</li></ol><h3 id="2-使用hexo进行搭建"><a href="#2-使用hexo进行搭建" class="headerlink" title="2. 使用hexo进行搭建"></a>2. 使用hexo进行搭建</h3><ol><li>在想要存储博客文件的目录中打开cmd， 输入命令 <code>hexo init 文件夹名称</code>，<ul><li>如<code>hexo init blog</code></li></ul></li><li>输入 <code>cd blog</code>  <code>npm install</code>  安装依赖</li><li>输入 <code>hexo g</code> 生成静态文件</li><li>输入 <code>hexo s</code> 打开一个服务</li><li>浏览器打开 localhost:4000 即可看到我们搭建的网站</li></ol><h4 id="a-hexo-文件目录的认识"><a href="#a-hexo-文件目录的认识" class="headerlink" title="a. hexo 文件目录的认识"></a>a. hexo 文件目录的认识</h4><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512100809.png" alt="image.png"></p><h3 id="3-hexo基础使用"><a href="#3-hexo基础使用" class="headerlink" title="3. hexo基础使用"></a>3. hexo基础使用</h3><h4 id="a-写文章"><a href="#a-写文章" class="headerlink" title="a. 写文章"></a>a. 写文章</h4><ol><li>打开cmd 输入 <code>hexo new 文章名</code> 会在 &#x2F;博客文件的根目录&#x2F;source&#x2F;_post 中生成md文件</li><li>可以使用markdown语法进行编辑</li><li>然后使用 <code>hexo g</code> 命令生成静态文件</li><li>使用 <code>hexo s</code> 打开服务， 即可看到写好的博客</li></ol><h4 id="b-修改模版"><a href="#b-修改模版" class="headerlink" title="b. 修改模版"></a>b. 修改模版</h4><ol><li>打开scaffolds 文件夹</li><li>找到post.md 对其进行修改<ul><li>主要是修改 Front-matter<ul><li>例如加上categories 进行分类</li></ul></li></ul></li><li>示例  sticky 是fluid主题的排序，需要安装插件，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ymal">---<br><br>title: &#123;&#123; title &#125;&#125;<br><br>date: &#123;&#123; date &#125;&#125;<br><br>tags:<br><br>categories:<br><br>sticky:              <br><br>---<br></code></pre></td></tr></table></figure></li><li>这样 使用<code>hexo new  post</code> 生成的文件，都是这个</li></ol><h2 id="三、github-vercel-部署"><a href="#三、github-vercel-部署" class="headerlink" title="三、github+vercel 部署"></a>三、github+vercel 部署</h2><p>将本地搭建的hexo 发布到github上，并通过vercel进行部署</p><h3 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="1. 创建github仓库"></a>1. 创建github仓库</h3><ol><li>打开 <a href="https://github.com/">https://github.com/</a> 注册并登录</li><li>选择新建仓库<ul><li><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512101541.png" alt="image.png"></li><li><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512101748.png" alt="image.png"></li><li>点击create 进行创建</li></ul></li><li>创建完成后会出现， 点击复制该连接，后面会用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512101901.png" alt="image.png"></p><h3 id="2-给hexo安装插件"><a href="#2-给hexo安装插件" class="headerlink" title="2. 给hexo安装插件"></a>2. 给hexo安装插件</h3><ol><li>打开博客文件目录cmd 执行 <code> npm install hexo-deployer-git --save</code></li><li>打开文件目录中的_config.yml <ul><li>划到最后 对其进行修改<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span>  <br><span class="hljs-symbol">  type:</span> git  <br><span class="hljs-symbol">  repo:</span>创建仓库成功后 复制的url  git@.... <br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure>例如我的：<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">deploy:</span><br><br>  <span class="hljs-params">type:</span> git<br><br>  <span class="hljs-params">repo:</span> git@github.com:word1230<span class="hljs-symbol">/xxxx.github.io.git</span><br><br>  <span class="hljs-params">branch:</span> main<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3. 发布"></a>3. 发布</h3><ol><li>打开cmd ，使用命令 <code>hexo d</code> 即可将静态文件（public目录下的文件）上传到github</li></ol><h3 id="4-使用vercel进行部署"><a href="#4-使用vercel进行部署" class="headerlink" title="4. 使用vercel进行部署"></a>4. 使用vercel进行部署</h3><ol><li><p>打开 <a href="https://vercel.com/">https://vercel.com/</a> 使用github账号注册并登录</p></li><li><p>选则 add project</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512102747.png" alt="image.png"></p></li><li><p>点击develop进行部署</p></li><li><p>点击Continue toDashboard<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512103107.png" alt="image.png"></p></li></ol><p>点击这个即可访问我们的网站</p><h3 id="5-以后写文章"><a href="#5-以后写文章" class="headerlink" title="5. 以后写文章"></a>5. 以后写文章</h3><p>写完后 需要使用 </p><ol><li><code>hexo g</code> 生成静态文件</li><li><code>hexo d</code> 上传到github </li><li>vercel 会自动检测更新并重新部署</li></ol><h2 id="四、fluid-主题配置"><a href="#四、fluid-主题配置" class="headerlink" title="四、fluid 主题配置"></a>四、fluid 主题配置</h2><p>虽然说部署完成了，但是不好看，我们给他配一个主题<br>可以从 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 中选择自己喜欢的<br>我这里使用fluid 进行演示</p><h3 id="1-安装fluid-主题"><a href="#1-安装fluid-主题" class="headerlink" title="1. 安装fluid 主题"></a>1. 安装fluid 主题</h3><p>参考： <a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a></p><ol><li>打开 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/">https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/</a> ，点击source code（zip）进行下载</li><li>解压下载文件到theme目录，并重命名为fluid</li><li>在_config.yml 中将 <code>theme: fluid</code> 改为fluid</li><li>在博客根目录中 将 _config.landscope.yml 修改为  _config.fluid.yml<ul><li>theme文件夹的fluid 中也有一个_config.yml， 将其内容复制到_config.fluid.yml中</li><li>以后修改_config.fluid.yml 就可以直接修改主题</li></ul></li></ol><h3 id="2-对主题进行配置"><a href="#2-对主题进行配置" class="headerlink" title="2. 对主题进行配置"></a>2. 对主题进行配置</h3><p>参考 <a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97</a><br>依次进行配置即可</p>]]></content>
    
    
    <categories>
      
      <category>建站笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重装系统</title>
    <link href="/2025/05/11/%E7%B3%BB%E7%BB%9F/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/05/11/%E7%B3%BB%E7%BB%9F/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="重装-windows10系统"><a href="#重装-windows10系统" class="headerlink" title="重装 windows10系统"></a>重装 windows10系统</h1><p>本文将介绍重装系统的流程，包括制作启动盘，下载系统，使用dism++进行重装</p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ul><li>制作系统启动盘</li><li>下载windows10系统</li><li>使用u盘启动，并使用dism++进行重装</li></ul><h2 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h2><ul><li>一个u盘 至少16g （系统大概6个g左右）</li><li>一台电脑</li></ul><h2 id="一、-制作系统启动盘"><a href="#一、-制作系统启动盘" class="headerlink" title="一、 制作系统启动盘"></a>一、 制作系统启动盘</h2><p>使用u盘进行重装，需要使用u盘启动系统，需要将u盘制作为系统启动盘<br>这里使用winpe进行制作</p><h3 id="1-下载winpe"><a href="#1-下载winpe" class="headerlink" title="1. 下载winpe"></a>1. 下载winpe</h3><ol><li>打开 <a href="https://www.wepe.com.cn/download.html">https://www.wepe.com.cn/download.html</a></li><li>获取下载地址 -  先不捐赠</li><li>点击64位下载</li></ol><h3 id="2-进行制作"><a href="#2-进行制作" class="headerlink" title="2. 进行制作"></a>2. 进行制作</h3><ol><li>将u盘插入电脑</li><li>打开下载的exe文件</li><li>选择安装pe到u盘<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512110128.png" alt="image.png"></li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512110235.png" alt="image.png"><br>4. 点击安装 就制作完成了</p><h2 id="二、-下载windows10-系统与网卡"><a href="#二、-下载windows10-系统与网卡" class="headerlink" title="二、 下载windows10 系统与网卡"></a>二、 下载windows10 系统与网卡</h2><ol><li>打开 <a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a> 注册登录</li><li>选择win10 系统</li><li>复制bt链接 到qBittorrent 中进行下载</li></ol><p>下载qbittorrent<br><a href="https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases">https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases</a></p><ol start="4"><li><p>下载完成后将系统文件复制到u盘中</p></li><li><p>&#x3D;&#x3D;同时到对应品牌的官网下载型号对应的无线网卡的驱动&#x3D;&#x3D;，</p></li></ol><h2 id="三、进行重装"><a href="#三、进行重装" class="headerlink" title="三、进行重装"></a>三、进行重装</h2><ol><li>插入u盘， 重启系统，在重启时不断按系统对应的 bios启动键（可以查到）</li><li>选择u盘启动</li><li>进入u盘安装的winpe 的系统中</li><li>点击文件夹 将所有磁盘格式化</li><li>如果要分区 可以使用分区工具进行</li><li>点击dism++， 系统还原  选择<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512111314.png" alt="image.png"><ul><li>目标映像为要安装的系统</li><li>第一个输入框为下载的系统</li><li>第二个输入框为 c盘目录</li><li>选择 添加引导 与格式化即可</li></ul></li><li>点击确定并等待完成</li><li>完成后 &#x3D;&#x3D;拔掉硬盘&#x3D;&#x3D; 并重启</li></ol><p>进入系统，进行设置， 完成网卡的安装</p><hr><p>经过上述步骤完成了u盘重装系统</p>]]></content>
    
    
    <categories>
      
      <category>重装系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/11/hello-world/"/>
    <url>/2025/05/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
