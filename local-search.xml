<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>概论、符号串与语法</title>
    <link href="/2025/05/12/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E6%A6%82%E8%AE%BA%E3%80%81%E7%AC%A6%E5%8F%B7%E4%B8%B2%E4%B8%8E%E8%AF%AD%E6%B3%95/"/>
    <url>/2025/05/12/%E8%AF%BE%E7%A8%8B/%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86/%E6%A6%82%E8%AE%BA%E3%80%81%E7%AC%A6%E5%8F%B7%E4%B8%B2%E4%B8%8E%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="编译原理"><a href="#编译原理" class="headerlink" title="编译原理"></a>编译原理</h1><p>本文将介绍编译原理的概论，符号与符号串，文法，句型分析等</p><h2 id="一、概论"><a href="#一、概论" class="headerlink" title="一、概论"></a>一、概论</h2><p>编译原理是 讲 程序如何经过编译最终变为可执行文件进行执行的原理</p><ol><li><p>什么是编译程序</p><ul><li>编译程序是翻译程序，将源代码翻译为目标代码的程序</li><li>如： 将c语言代码翻译为汇编语言</li></ul></li><li><p>编译程序执行的逻辑过程</p><ol><li>词法分析</li><li>语法分析</li><li>语义分析</li><li>中间代码生成与优化</li><li>目标代码生成<br>虽然说是这样的逻辑过程， 但是并不是严格按照这个顺序<br>比如： 在进行语法分析时可能已经进行了中间代码的生成</li></ol></li></ol><blockquote><p>需要理解的概念<br>源程序：程序员写好的程序<br>目标程序：最终可执行的程序</p></blockquote><h2 id="二、符号与符号串"><a href="#二、符号与符号串" class="headerlink" title="二、符号与符号串"></a>二、符号与符号串</h2><h3 id="1-字母表，符号，符号串，空串-，符号的长度"><a href="#1-字母表，符号，符号串，空串-，符号的长度" class="headerlink" title="1.字母表，符号，符号串，空串 ，符号的长度"></a>1.字母表，符号，符号串，空串 ，符号的长度</h3><p>字母表: 符号的集合， 如 $\Sigma$ &#x3D;{a,b,c} a ，b，c都是是符号<br>符号串:符号的任意组合，如： a，ab，aac都是$\Sigma$ 的符号串<br>空串： 没有字符的串， 用 $\epsilon$表示<br>符号串的长度： |ab| &#x3D; 2  |$\epsilon$|&#x3D;0<br>子串： 对原串进行截取，得到的就是子串 ， 如 x&#x3D;abc  a，ab，abc 都是子串，但bc , $\epsilon$ 都不是</p><h3 id="2-符号串的运算"><a href="#2-符号串的运算" class="headerlink" title="2.符号串的运算"></a>2.符号串的运算</h3><ul><li><p>符号串的连接<br>如 x &#x3D;ab  y &#x3D;cd  xy&#x3D;abcd  就是把两个写一起</p></li><li><p>符号串的方幂<br>z&#x3D; $x^n$  是把 x 写n次<br>如  x的1 次 &#x3D; x   $x^2$ &#x3D; xx   $x^0$ &#x3D; *$\epsilon$</p></li></ul><h3 id="3-符号串的集合"><a href="#3-符号串的集合" class="headerlink" title="3. 符号串的集合"></a>3. 符号串的集合</h3><ul><li>概念： 若集合A中所有元素都是字母表 $\Sigma$ 中的符号串，则称A是 $\Sigma$ 上的符号串集合<ul><li>例如：  $\Sigma$  &#x3D;{1,2,3} A &#x3D;{12,13,23}</li></ul></li><li>表示：<ul><li>穷举表示</li><li>省略表示</li><li>描述表示法</li></ul></li><li>空集：不含任何的集合，包括空串</li></ul><p>运算：</p><ul><li>两个符号串集合的乘积 ：AB &#x3D;  {xy| x属于A 且 y 属于B}  即 两个集合元素的连接<ul><li>如  A &#x3D;{1,2} B&#x3D; {3,4}   AB&#x3D;{13,14,23,24}</li></ul></li><li>闭包: 表示 $\Sigma$ 上一切长度为n（n&gt;0）的符号串的集合<br>$$<br>\Sigma^* &#x3D; \Sigma^0 U \Sigma ^1 …. U \Sigma^n<br>$$</li><li>正闭包： 闭包去掉  $\Sigma$ 0</li></ul><h2 id="三、文法与语言"><a href="#三、文法与语言" class="headerlink" title="三、文法与语言"></a>三、文法与语言</h2><h3 id="1-文法"><a href="#1-文法" class="headerlink" title="1.文法"></a>1.文法</h3><ul><li><p>产生式：用   –&gt; 或者 ：：&#x3D; 表示定义为或者产生为</p></li><li><p>文法的定义：G定义为四元组  （$V_N ,V_T,P,S$）</p><ul><li>Vn 表示非终结符</li><li>Vt表示 终结符</li><li>p 表示 产生式</li><li>s表示 标识符</li></ul></li><li><p>Vn U Vt &#x3D; v  字汇表</p></li><li><p>vn 与vt 相交是空集</p></li><li><p>在表示时，只需要用产生式来代表这个文法， 我们规定第一条产生式的左部是标识符</p></li><li><p>一个上下文无关文法的例子   | 表示或者</p></li></ul><p>$G[标识符] :   &lt;标识符&gt; –&gt;  &lt;字母&gt;$<br>        $&lt;标识符&gt; –&gt; &lt;标识符&gt;&lt;字母&gt;$<br>        $&lt;字母&gt; –&gt; a|b|c|d…|z$<br>这就是一个用产生式表示文法的例子</p><h3 id="2-使用文法"><a href="#2-使用文法" class="headerlink" title="2.使用文法"></a>2.使用文法</h3><p>我们已经知道了文法， 文法要如何使用呢</p><p>已知：<br>    v&#x3D;233&lt;字母&gt;66            w&#x3D;233a66<br>    产生式： &lt;字母&gt; -&gt; a </p><p>可以知道： v 通过产生式（文法）可以推导到w，  我们称v 可以<em><strong>直接推导</strong></em>w  用 v &#x3D;&gt; w<br>或者也可以称 w <em><strong>规约</strong></em>到v    </p><p>这种一步就可以推导到的， <em><strong>推导长度</strong></em>为1    即v &#x3D;&gt; w   n&#x3D;1<br>自己推导自己的，  用 v &#x3D;v 表示 没有用到产生式 n &#x3D;0<br>相应的还有多步推导</p><p>递归推导： 如果 非终结符出现在了产生式的右侧，则一直使用这个规则可以使得推导无限进行下去，这种叫做递归推导</p><h4 id="句型，句子，文法，语言"><a href="#句型，句子，文法，语言" class="headerlink" title="句型，句子，文法，语言"></a>句型，句子，文法，语言</h4><ul><li>句型：对于文法 G（Z） ，字汇表v ，若 Z的多步推导 为x ， x属于字汇表的闭包 ， 则称x为句型<ul><li>可以理解为句型是文法推导的中间态，还不是一个完整的句子</li></ul></li><li>句子： x 属于终结符的闭包<ul><li>就是完整的句子</li></ul></li><li>文法： 生成句子的规则</li><li>语言：所有合法句子的集合</li><li>类比：<ul><li>英语中<ul><li>文法： 句子-&gt; 主语+谓语</li><li>句型： 句子 → 主语 + 谓语 → (名词短语) + 谓语   这不是一个完整的句子</li><li>句子:   句子 → 主语 + 谓语 → (名词短语) + 谓语  → (the cat) + (runs) 对这里才是完整的句子</li><li>语言： 就是这个文法所能推出的所有的句子</li></ul></li></ul></li></ul><h3 id="3-文法分类"><a href="#3-文法分类" class="headerlink" title="3.文法分类"></a>3.文法分类</h3><p>分为 </p><ul><li>0 型文法</li><li>1型文法</li><li>2型文法（上下文无关文法）： 规定 每条生成式满足：非终结符在左部，又不是非终结+终结</li><li>3型文法（正规文法）<ul><li>规定 每条生成式都满足： 非终结符 -&gt;终结符  或者 非终结符 -&gt; 终结符+非终结符（右线型文法）   或者  非终结符 -&gt; 非终结符+终结符（左线型文法）</li></ul></li></ul><h2 id="四、文法分析树"><a href="#四、文法分析树" class="headerlink" title="四、文法分析树"></a>四、文法分析树</h2><p>现有文法：<br>$G[S]： s-&gt; aAB$<br>    $A-&gt;Ba|a$<br>    $B-bd$<br>对应推导过程： S -&gt; aAB -&gt; aBaB -&gt; abdaB -&gt; abdabd<br>则能画出<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512204810.png" alt="image.png"></p><ul><li>根节点是开始符号</li><li>分支： 有分支一定是非终结符，反之不一定</li><li><em><strong>子树</strong></em>： 树根及其向下的部分， 比如 A及其下面的所有都是S的子树</li><li><em><strong>简单子树</strong></em>：只有一层的子树，比如B  ，0或多都不行</li></ul><p>上面的推导中 A-&gt;Ba|a  中使用了Ba这条规则，一种最左推导</p><ul><li><em><strong>最左推导</strong></em>：每次都替换左边的非终结符</li><li><em><strong>最右推导</strong></em>（规范推导）： 每次替换右边的非终结符<ul><li>得到的是规范句型</li></ul></li></ul><p>还有是从最后的 abdabd 往前推， 直到S，这种叫<em><strong>规约</strong></em>，就是推导的逆过程</p><p><em><strong>二义性</strong></em><br>句子的二义性： 句子有两颗语法分析树，则称改句子为二义性句子<br>文法二义性： 存在有二义性的句子<br>语言： 句子全是二义性句子，则语言为二义性语言</p><h2 id="五、句型分析"><a href="#五、句型分析" class="headerlink" title="五、句型分析"></a>五、句型分析</h2><p>分析： 是从左到右识别符号串<br>分析算法：</p><ul><li>自底向上： 不断规约直到标识符</li><li>自顶向下： 不断推导直到输入串<br>相比之下：自底向上更符合程序设计的思想</li></ul><p>根据自底向上分析算法提出：</p><ul><li>短语: 子树的末端符号串是相对于子树根的短语</li><li>简单短语：简单子树的……………………………..</li><li>句柄： 最左简单子树的末端符号串构成句柄</li></ul><blockquote><p>例题：</p></blockquote><p>现有文法：<br>$G[S]： s-&gt; aAB$<br>    $A-&gt;Ba|a$<br>    $B-bd$<br>对应推导过程： S -&gt; aAB -&gt; aBaB -&gt; abdaB -&gt; abdabd<br>则能画出<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512204810.png" alt="image.png"></p><p>abdabd的短语： </p><ol><li>找非终结符： 定位子树  S A B</li><li>短语： <ol><li>abdabd 是句型abdabd相对于子树S的短语</li><li>bda 是句型abdabd 相对于子树A的短语</li><li>bd是句型abdabd 相对于子树B的短语</li></ol></li><li>简单短语：<ol><li>从短语中选择</li><li>bd是句型abdabd相对于子树B的简单短语</li></ol></li><li>句柄：<ol><li>bd 是句型abdabd 相对于子树B的句柄</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>课程</category>
      
      <category>编译原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/05/12/PowerToys_Paste_20250512134651/"/>
    <url>/2025/05/12/PowerToys_Paste_20250512134651/</url>
    
    <content type="html"><![CDATA[<span style="color: rgb(102, 102, 102); font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Tahoma, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft Yahei&quot;, Simsun, sans-serif; font-size: large; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; white-space: normal; background-color: rgb(255, 255, 255); text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial; display: inline !important; float: none;">免费评个分支持一下感</span><!--EndFragment-->]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo+obsidian的实践</title>
    <link href="/2025/05/11/%E5%BB%BA%E7%AB%99/hexo-obsidian%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
    <url>/2025/05/11/%E5%BB%BA%E7%AB%99/hexo-obsidian%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）"><a href="#使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）" class="headerlink" title="使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）"></a>使用Obsidian高效撰写并发布Hexo博客（集成Terminal与PicGo图床）</h1><p>本文将介绍如何配置Obsidian作为Hexo博客的写作工具，并通过集成Terminal、PicGo、CDN以及GitHub图床，实现高效的文章撰写、图片管理和一键发布流程。</p><h2 id="核心流程概述"><a href="#核心流程概述" class="headerlink" title="核心流程概述"></a>核心流程概述</h2><ul><li><strong>快捷发布</strong>：集成Terminal到Obsidian中，使用<code>Ctrl+T</code>快速打开终端执行Hexo命令。</li><li><strong>图片管理</strong>：通过PicGo将图片自动上传至GitHub图床，并使用CDN加速访问。</li><li><strong>自动化</strong>：考虑使用QuickAdd和JS脚本简化博客创建与发布流程（本文重点介绍前三项）。</li></ul><h2 id="一、obsidian集成terminal"><a href="#一、obsidian集成terminal" class="headerlink" title="一、obsidian集成terminal"></a>一、obsidian集成terminal</h2><p>为了方便执行Hexo命令（如 <code>hexo new &quot;我的新文章&quot;</code>、<code>hexo g -d</code>），我们可以将Terminal集成到Obsidian中。</p><ol><li><strong>安装Terminal插件</strong>：<ul><li>在Obsidian的插件市场搜索并安装名为 “Terminal” 的插件。</li></ul></li><li><strong>修改快捷键</strong>：<ul><li>打开Obsidian的快捷键设置。</li><li>找到 <code>Ctrl+T</code> 原本的功能（通常是打开新标签页），将其移除或更改为其他快捷键。</li><li>将 “Terminal: Open terminal at vault root” (或类似描述，意为“打开根目录外部终端”) 的快捷键设置为 <code>Ctrl+T</code>。</li></ul></li><li><strong>使用</strong>：<ul><li>现在，按下 <code>Ctrl+T</code> 即可快速打开项目根目录的终端，方便执行Hexo相关命令。</li></ul></li></ol><h2 id="二、图片管理：Obsidian-PicGo-CDN-GitHub图床"><a href="#二、图片管理：Obsidian-PicGo-CDN-GitHub图床" class="headerlink" title="二、图片管理：Obsidian + PicGo + CDN + GitHub图床"></a>二、图片管理：Obsidian + PicGo + CDN + GitHub图床</h2><h3 id="1-PicGo-安装"><a href="#1-PicGo-安装" class="headerlink" title="1. PicGo 安装"></a>1. PicGo 安装</h3><p>PicGo是一款优秀的图床上传工具。</p><ol><li>访问 <a href="https://github.com/Molunerfinn/PicGo/releases">PicGo Releases 页面</a>。</li><li>找到并下载合适的版本（例如 <code>2.3.1</code>）。对于Windows用户，选择 <code>.exe</code> 安装文件。<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250511225036.png" alt="image.png"></li><li>按照提示完成安装。</li></ol><h3 id="2-PicGo-配置"><a href="#2-PicGo-配置" class="headerlink" title="2. PicGo 配置"></a>2. PicGo 配置</h3><h4 id="a-插件设置"><a href="#a-插件设置" class="headerlink" title="a. 插件设置"></a>a. 插件设置</h4><p>打开PicGo应用，进入设置界面：</p><ul><li>在“插件设置”中，我们可以选择显示的图床。由于我们主要使用GitHub，可以将其他不常用的图床取消勾选，以简化界面。<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250511225142.png" alt="image.png"></li></ul><ul><li>图床设置 -&gt; github  填入参数<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250511225606.png" alt="image.png"></li></ul><ul><li>**仓库名 (Repo)**：例如，你的GitHub仓库地址是 <code>https://github.com/your-username/your-repo-name</code>，则仓库名填写 <code>your-username/your-repo-name</code>。</li><li>**分支名 (Branch)**：通常是 <code>main</code> </li><li>**存储路径 (Path)**：可选，图片在仓库中存放的文件夹路径，例如 <code>img/</code> 或 <code>blog/images/</code>。如果填写，PicGo会在仓库根目录下创建此文件夹并存入图片。例如，填写 <code>resource/</code>，图片会存储在仓库的 <code>resource</code> 目录下。</li><li>**自定义域名 (Custom Domain)**：为了加速图片访问，推荐使用CDN。jsDelivr是一个免费好用的CDN，其格式为：<br><code>https://cdn.jsdelivr.net/gh/你的用户名/你的仓库名@分支名</code><br>例如：<code>https://cdn.jsdelivr.net/gh/abcde/picture@main</code> (如果图片在仓库根目录)<br>如果设置了存储路径，例如 <code>resource/</code>，则自定义域名可以是：<br><code>https://cdn.jsdelivr.net/gh/abcde/picture@main</code> (PicGo会在上传后自动拼接上 <code>resource/图片名.png</code>)</li></ul><h4 id="b-生成-GitHub-Token"><a href="#b-生成-GitHub-Token" class="headerlink" title="b. 生成 GitHub Token"></a>b. 生成 GitHub Token</h4><p>PicGo需要GitHub Personal Access Token来进行仓库操作。</p><ol><li>登录GitHub，点击右上角头像 -&gt; “Settings”。</li><li>在左侧导航栏找到 “Developer settings”。</li><li>选择 “Personal access tokens” -&gt; “Tokens (classic)”。</li><li>点击 “Generate new token” -&gt; “Generate new token (classic)”。<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512091128.png" alt="image.png"><br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512091358.png" alt="image.png"></li><li>**Note (Token描述)**：填写一个易于识别的名称，如 <code>PicGo for Obsidian Blog</code>。</li><li>**Expiration (有效期)**：根据需要选择，可以选择 “No expiration” (无过期时间)，但出于安全考虑，建议设置一个有效期。</li><li>**Select scopes (选择权限)**：勾选 <code>repo</code> 权限。这是操作仓库（包括上传文件）所必需的。</li><li>点击 “Generate token”。</li><li><strong>重要</strong>：立即复制生成的Token。这个Token只会显示一次，关闭页面后将无法再次查看。将其粘贴到PicGo中GitHub图床设置的 “Token” 字段。</li></ol><h3 id="3-Obsidian-集成-PicGo"><a href="#3-Obsidian-集成-PicGo" class="headerlink" title="3. Obsidian 集成 PicGo"></a>3. Obsidian 集成 PicGo</h3><p>为了实现在Obsidian中粘贴图片即自动上传的功能：</p><ol><li>在Obsidian的插件市场搜索并安装 “Image auto upload plugin” 插件。</li><li>配置该插件，使其与PicGo联动（通常是确保PicGo服务正在运行，插件会调用PicGo的API）。</li><li>现在，当你在Obsidian编辑器中粘贴图片时，它应该会自动通过PicGo上传到你配置好的GitHub图床，并替换为图床链接。</li></ol><h2 id="三、使用QuickAdd与JS脚本（可选）"><a href="#三、使用QuickAdd与JS脚本（可选）" class="headerlink" title="三、使用QuickAdd与JS脚本（可选）"></a>三、使用QuickAdd与JS脚本（可选）</h2><p>可以使用ai来将js写出来</p><hr><p>通过以上配置，你应该能够建立一个流畅的Obsidian + Hexo博客写作和发布流程了。</p>]]></content>
    
    
    <categories>
      
      <category>建站笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从hexo开始的个人博客</title>
    <link href="/2025/05/11/%E5%BB%BA%E7%AB%99/%E4%BB%8Ehexo%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/05/11/%E5%BB%BA%E7%AB%99/%E4%BB%8Ehexo%E5%BC%80%E5%A7%8B%E7%9A%84%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="使用hexo搭建个人博客"><a href="#使用hexo搭建个人博客" class="headerlink" title="使用hexo搭建个人博客"></a>使用hexo搭建个人博客</h1><p>本文将介绍使用hexo搭建个人博客网站， 包括 安装hexo依赖的环境， 安装hexo，使用hexo，安装主题，部署发布等， 实现从0开始搭建个人博客网站</p><p>可以参考官方给出的教程 <a href="https://hexo.io/zh-cn/docs/">https://hexo.io/zh-cn/docs/</a></p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ul><li>环境搭建（node 与git 的安装， github 账号）</li><li>hexo基本使用（通过基本命令搭建一个helloworld页面，及如何写博客）</li><li>主题配置 </li><li>部署</li></ul><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>我部署时的环境：</p><ul><li>系统：windows 10 22hz</li><li>git ： 2.49.0</li><li>nvm： 1.2.2</li><li>node ： 18.20.0</li><li>hexo-cli: 4.3.2</li></ul><h2 id="一、安装hexo依赖的环境"><a href="#一、安装hexo依赖的环境" class="headerlink" title="一、安装hexo依赖的环境"></a>一、安装hexo依赖的环境</h2><p>需要安装 git 与 node </p><h3 id="1-git-的安装"><a href="#1-git-的安装" class="headerlink" title="1. git 的安装"></a>1. git 的安装</h3><p>为了与github 进行连接，需要安装git</p><ol><li>打开官网<a href="https://git-scm.com/downloads/win">Git - Downloading Package</a>，选择windows版本</li><li>打开安装程序 ，依次点击next进行安装</li><li>打开cmd ，输入git -v 测试<ul><li>若输出版本号则说明安装成功</li></ul></li></ol><h3 id="2-node-的安装"><a href="#2-node-的安装" class="headerlink" title="2. node 的安装"></a>2. node 的安装</h3><p>为了安装hexo 及其插件 需要安装node</p><h4 id="a-nvm-安装"><a href="#a-nvm-安装" class="headerlink" title="a.  nvm 安装"></a>a.  nvm 安装</h4><p>这里推荐使用nvm来进行安装node<br>nvm 是一个node 版本管理器，可以使用它来下载node环境</p><ol><li>从这个网站选择windows的安装包<a href="https://nvm.uihtm.com/doc/download-nvm.html">开始 下载nvm - nvm中文官网</a>，点击本地下载</li><li>下载后，依次点击next进行安装</li><li>安装完成后打开 cmd ， 输入 <code>nvm -v </code><ul><li>若输出版本号，则说明安装成功</li></ul></li></ol><h4 id="b-使用nvm安装node"><a href="#b-使用nvm安装node" class="headerlink" title="b. 使用nvm安装node"></a>b. 使用nvm安装node</h4><ol><li>打开cmd</li><li>输入 <code>nvm install 版本号</code>        进行node的安装<ul><li>如 <code>nvm install 18.20.0</code></li></ul></li><li>输入 <code>nvm use 18.20.0</code>  使用该版本的node</li><li>输入 <code>node -v</code><ul><li>若输出版本号 则说明安装成功</li></ul></li></ol><h2 id="二、使用hexo本地搭建"><a href="#二、使用hexo本地搭建" class="headerlink" title="二、使用hexo本地搭建"></a>二、使用hexo本地搭建</h2><p>在本地计算机中搭建hexo</p><h3 id="1-安装hexo"><a href="#1-安装hexo" class="headerlink" title="1. 安装hexo"></a>1. 安装hexo</h3><ol><li>打开cmd ，输入命令 <code>npm install -g hexo-cli</code> 进行安装</li></ol><h3 id="2-使用hexo进行搭建"><a href="#2-使用hexo进行搭建" class="headerlink" title="2. 使用hexo进行搭建"></a>2. 使用hexo进行搭建</h3><ol><li>在想要存储博客文件的目录中打开cmd， 输入命令 <code>hexo init 文件夹名称</code>，<ul><li>如<code>hexo init blog</code></li></ul></li><li>输入 <code>cd blog</code>  <code>npm install</code>  安装依赖</li><li>输入 <code>hexo g</code> 生成静态文件</li><li>输入 <code>hexo s</code> 打开一个服务</li><li>浏览器打开 localhost:4000 即可看到我们搭建的网站</li></ol><h4 id="a-hexo-文件目录的认识"><a href="#a-hexo-文件目录的认识" class="headerlink" title="a. hexo 文件目录的认识"></a>a. hexo 文件目录的认识</h4><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512100809.png" alt="image.png"></p><h3 id="3-hexo基础使用"><a href="#3-hexo基础使用" class="headerlink" title="3. hexo基础使用"></a>3. hexo基础使用</h3><h4 id="a-写文章"><a href="#a-写文章" class="headerlink" title="a. 写文章"></a>a. 写文章</h4><ol><li>打开cmd 输入 <code>hexo new 文章名</code> 会在 &#x2F;博客文件的根目录&#x2F;source&#x2F;_post 中生成md文件</li><li>可以使用markdown语法进行编辑</li><li>然后使用 <code>hexo g</code> 命令生成静态文件</li><li>使用 <code>hexo s</code> 打开服务， 即可看到写好的博客</li></ol><h4 id="b-修改模版"><a href="#b-修改模版" class="headerlink" title="b. 修改模版"></a>b. 修改模版</h4><ol><li>打开scaffolds 文件夹</li><li>找到post.md 对其进行修改<ul><li>主要是修改 Front-matter<ul><li>例如加上categories 进行分类</li></ul></li></ul></li><li>示例  sticky 是fluid主题的排序，需要安装插件，<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ymal">---<br><br>title: &#123;&#123; title &#125;&#125;<br><br>date: &#123;&#123; date &#125;&#125;<br><br>tags:<br><br>categories:<br><br>sticky:              <br><br>---<br></code></pre></td></tr></table></figure></li><li>这样 使用<code>hexo new  post</code> 生成的文件，都是这个</li></ol><h2 id="三、github-vercel-部署"><a href="#三、github-vercel-部署" class="headerlink" title="三、github+vercel 部署"></a>三、github+vercel 部署</h2><p>将本地搭建的hexo 发布到github上，并通过vercel进行部署</p><h3 id="1-创建github仓库"><a href="#1-创建github仓库" class="headerlink" title="1. 创建github仓库"></a>1. 创建github仓库</h3><ol><li>打开 <a href="https://github.com/">https://github.com/</a> 注册并登录</li><li>选择新建仓库<ul><li><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512101541.png" alt="image.png"></li><li><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512101748.png" alt="image.png"></li><li>点击create 进行创建</li></ul></li><li>创建完成后会出现， 点击复制该连接，后面会用</li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512101901.png" alt="image.png"></p><h3 id="2-给hexo安装插件"><a href="#2-给hexo安装插件" class="headerlink" title="2. 给hexo安装插件"></a>2. 给hexo安装插件</h3><ol><li>打开博客文件目录cmd 执行 <code> npm install hexo-deployer-git --save</code></li><li>打开文件目录中的_config.yml <ul><li>划到最后 对其进行修改<figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span>  <br><span class="hljs-symbol">  type:</span> git  <br><span class="hljs-symbol">  repo:</span>创建仓库成功后 复制的url  git@.... <br><span class="hljs-symbol">  branch:</span> main<br></code></pre></td></tr></table></figure>例如我的：<figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-params">deploy:</span><br><br>  <span class="hljs-params">type:</span> git<br><br>  <span class="hljs-params">repo:</span> git@github.com:word1230<span class="hljs-symbol">/xxxx.github.io.git</span><br><br>  <span class="hljs-params">branch:</span> main<br></code></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-发布"><a href="#3-发布" class="headerlink" title="3. 发布"></a>3. 发布</h3><ol><li>打开cmd ，使用命令 <code>hexo d</code> 即可将静态文件（public目录下的文件）上传到github</li></ol><h3 id="4-使用vercel进行部署"><a href="#4-使用vercel进行部署" class="headerlink" title="4. 使用vercel进行部署"></a>4. 使用vercel进行部署</h3><ol><li><p>打开 <a href="https://vercel.com/">https://vercel.com/</a> 使用github账号注册并登录</p></li><li><p>选则 add project</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512102747.png" alt="image.png"></p></li><li><p>点击develop进行部署</p></li><li><p>点击Continue toDashboard<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512103107.png" alt="image.png"></p></li></ol><p>点击这个即可访问我们的网站</p><h3 id="5-以后写文章"><a href="#5-以后写文章" class="headerlink" title="5. 以后写文章"></a>5. 以后写文章</h3><p>写完后 需要使用 </p><ol><li><code>hexo g</code> 生成静态文件</li><li><code>hexo d</code> 上传到github </li><li>vercel 会自动检测更新并重新部署</li></ol><h2 id="四、fluid-主题配置"><a href="#四、fluid-主题配置" class="headerlink" title="四、fluid 主题配置"></a>四、fluid 主题配置</h2><p>虽然说部署完成了，但是不好看，我们给他配一个主题<br>可以从 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 中选择自己喜欢的<br>我这里使用fluid 进行演示</p><h3 id="1-安装fluid-主题"><a href="#1-安装fluid-主题" class="headerlink" title="1. 安装fluid 主题"></a>1. 安装fluid 主题</h3><p>参考： <a href="https://hexo.fluid-dev.com/docs/start/">https://hexo.fluid-dev.com/docs/start/</a></p><ol><li>打开 <a href="https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/">https://github.com/fluid-dev/hexo-theme-fluid/releases/tag/</a> ，点击source code（zip）进行下载</li><li>解压下载文件到theme目录，并重命名为fluid</li><li>在_config.yml 中将 <code>theme: fluid</code> 改为fluid</li><li>在博客根目录中 将 _config.landscope.yml 修改为  _config.fluid.yml<ul><li>theme文件夹的fluid 中也有一个_config.yml， 将其内容复制到_config.fluid.yml中</li><li>以后修改_config.fluid.yml 就可以直接修改主题</li></ul></li></ol><h3 id="2-对主题进行配置"><a href="#2-对主题进行配置" class="headerlink" title="2. 对主题进行配置"></a>2. 对主题进行配置</h3><p>参考 <a href="https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97">https://hexo.fluid-dev.com/docs/guide/#%E5%85%B3%E4%BA%8E%E6%8C%87%E5%8D%97</a><br>依次进行配置即可</p>]]></content>
    
    
    <categories>
      
      <category>建站笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>技术笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>重装系统</title>
    <link href="/2025/05/11/%E7%B3%BB%E7%BB%9F/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/"/>
    <url>/2025/05/11/%E7%B3%BB%E7%BB%9F/%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="重装-windows10系统"><a href="#重装-windows10系统" class="headerlink" title="重装 windows10系统"></a>重装 windows10系统</h1><p>本文将介绍重装系统的流程，包括制作启动盘，下载系统，使用dism++进行重装</p><h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><ul><li>制作系统启动盘</li><li>下载windows10系统</li><li>使用u盘启动，并使用dism++进行重装</li></ul><h2 id="需要的环境"><a href="#需要的环境" class="headerlink" title="需要的环境"></a>需要的环境</h2><ul><li>一个u盘 至少16g （系统大概6个g左右）</li><li>一台电脑</li></ul><h2 id="一、-制作系统启动盘"><a href="#一、-制作系统启动盘" class="headerlink" title="一、 制作系统启动盘"></a>一、 制作系统启动盘</h2><p>使用u盘进行重装，需要使用u盘启动系统，需要将u盘制作为系统启动盘<br>这里使用winpe进行制作</p><h3 id="1-下载winpe"><a href="#1-下载winpe" class="headerlink" title="1. 下载winpe"></a>1. 下载winpe</h3><ol><li>打开 <a href="https://www.wepe.com.cn/download.html">https://www.wepe.com.cn/download.html</a></li><li>获取下载地址 -  先不捐赠</li><li>点击64位下载</li></ol><h3 id="2-进行制作"><a href="#2-进行制作" class="headerlink" title="2. 进行制作"></a>2. 进行制作</h3><ol><li>将u盘插入电脑</li><li>打开下载的exe文件</li><li>选择安装pe到u盘<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512110128.png" alt="image.png"></li></ol><p><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512110235.png" alt="image.png"><br>4. 点击安装 就制作完成了</p><h2 id="二、-下载windows10-系统与网卡"><a href="#二、-下载windows10-系统与网卡" class="headerlink" title="二、 下载windows10 系统与网卡"></a>二、 下载windows10 系统与网卡</h2><ol><li>打开 <a href="https://next.itellyou.cn/">https://next.itellyou.cn/</a> 注册登录</li><li>选择win10 系统</li><li>复制bt链接 到qBittorrent 中进行下载</li></ol><p>下载qbittorrent<br><a href="https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases">https://github.com/c0re100/qBittorrent-Enhanced-Edition/releases</a></p><ol start="4"><li><p>下载完成后将系统文件复制到u盘中</p></li><li><p>&#x3D;&#x3D;同时到对应品牌的官网下载型号对应的无线网卡的驱动&#x3D;&#x3D;，</p></li></ol><h2 id="三、进行重装"><a href="#三、进行重装" class="headerlink" title="三、进行重装"></a>三、进行重装</h2><ol><li>插入u盘， 重启系统，在重启时不断按系统对应的 bios启动键（可以查到）</li><li>选择u盘启动</li><li>进入u盘安装的winpe 的系统中</li><li>点击文件夹 将所有磁盘格式化</li><li>如果要分区 可以使用分区工具进行</li><li>点击dism++， 系统还原  选择<br><img src="https://cdn.jsdelivr.net/gh/word1230/picture/resources/20250512111314.png" alt="image.png"><ul><li>目标映像为要安装的系统</li><li>第一个输入框为下载的系统</li><li>第二个输入框为 c盘目录</li><li>选择 添加引导 与格式化即可</li></ul></li><li>点击确定并等待完成</li><li>完成后 &#x3D;&#x3D;拔掉硬盘&#x3D;&#x3D; 并重启</li></ol><p>进入系统，进行设置， 完成网卡的安装</p><hr><p>经过上述步骤完成了u盘重装系统</p>]]></content>
    
    
    <categories>
      
      <category>重装系统</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/05/11/hello-world/"/>
    <url>/2025/05/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
